;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Computing : 
  module Computing : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>}}, flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>}}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Computing.scala 13:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Computing.scala 14:21]
    reg yReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[Computing.scala 15:21]
    reg cntReg : UInt<4>, clock with : (reset => (reset, UInt<4>("h00"))) @[Computing.scala 16:23]
    node _T = eq(stateReg, UInt<2>("h00")) @[Computing.scala 18:27]
    io.in.ready <= _T @[Computing.scala 18:15]
    node _T_1 = eq(stateReg, UInt<2>("h02")) @[Computing.scala 19:28]
    io.out.valid <= _T_1 @[Computing.scala 19:16]
    io.out.bits.x <= xReg @[Computing.scala 20:17]
    io.out.bits.y <= yReg @[Computing.scala 21:17]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[Computing.scala 25:25]
        xReg <= io.in.bits.x @[Computing.scala 26:14]
        yReg <= io.in.bits.y @[Computing.scala 27:14]
        cntReg <= UInt<1>("h01") @[Computing.scala 28:16]
        stateReg <= UInt<2>("h01") @[Computing.scala 29:18]
        skip @[Computing.scala 25:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = mul(xReg, asSInt(UInt<4>("h05"))) @[Computing.scala 33:20]
        node _T_5 = mul(yReg, asSInt(UInt<3>("h03"))) @[Computing.scala 33:33]
        node _T_6 = add(_T_4, _T_5) @[Computing.scala 33:26]
        node _T_7 = tail(_T_6, 1) @[Computing.scala 33:26]
        node _T_8 = asSInt(_T_7) @[Computing.scala 33:26]
        xReg <= _T_8 @[Computing.scala 33:12]
        node _T_9 = mul(xReg, asSInt(UInt<3>("h03"))) @[Computing.scala 34:20]
        node _T_10 = mul(yReg, asSInt(UInt<3>("h02"))) @[Computing.scala 34:33]
        node _T_11 = sub(_T_9, _T_10) @[Computing.scala 34:26]
        node _T_12 = tail(_T_11, 1) @[Computing.scala 34:26]
        node _T_13 = asSInt(_T_12) @[Computing.scala 34:26]
        yReg <= _T_13 @[Computing.scala 34:12]
        node _T_14 = eq(cntReg, UInt<4>("h08")) @[Computing.scala 36:19]
        when _T_14 : @[Computing.scala 36:28]
          stateReg <= UInt<2>("h02") @[Computing.scala 37:18]
          skip @[Computing.scala 36:28]
        else : @[Computing.scala 38:19]
          node _T_15 = add(cntReg, UInt<1>("h01")) @[Computing.scala 39:26]
          node _T_16 = tail(_T_15, 1) @[Computing.scala 39:26]
          cntReg <= _T_16 @[Computing.scala 39:16]
          skip @[Computing.scala 38:19]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_17 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_17 : @[Conditional.scala 39:67]
          when io.out.ready : @[Computing.scala 43:26]
            stateReg <= UInt<2>("h00") @[Computing.scala 44:18]
            skip @[Computing.scala 43:26]
          skip @[Conditional.scala 39:67]
    
