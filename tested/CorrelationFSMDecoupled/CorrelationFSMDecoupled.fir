;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CorrelationFSMDecoupled : 
  module DecoupledMultiplyAndAccumulate : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>, reset : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CorrelationFSMDecoupled.scala 114:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 115:21]
    reg yReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 116:21]
    reg resetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CorrelationFSMDecoupled.scala 117:25]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 118:23]
    io.out.bits <= accReg @[CorrelationFSMDecoupled.scala 120:15]
    node _T = eq(stateReg, UInt<1>("h00")) @[CorrelationFSMDecoupled.scala 121:27]
    io.in.ready <= _T @[CorrelationFSMDecoupled.scala 121:15]
    node _T_1 = eq(stateReg, UInt<1>("h00")) @[CorrelationFSMDecoupled.scala 122:28]
    io.out.valid <= _T_1 @[CorrelationFSMDecoupled.scala 122:16]
    node _T_2 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationFSMDecoupled.scala 126:25]
        xReg <= io.in.bits.x @[CorrelationFSMDecoupled.scala 127:14]
        yReg <= io.in.bits.y @[CorrelationFSMDecoupled.scala 128:14]
        resetReg <= io.in.bits.reset @[CorrelationFSMDecoupled.scala 129:18]
        stateReg <= UInt<1>("h01") @[CorrelationFSMDecoupled.scala 131:18]
        skip @[CorrelationFSMDecoupled.scala 126:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        stateReg <= UInt<1>("h00") @[CorrelationFSMDecoupled.scala 135:16]
        when resetReg : @[CorrelationFSMDecoupled.scala 137:23]
          accReg <= asSInt(UInt<1>("h00")) @[CorrelationFSMDecoupled.scala 138:16]
          skip @[CorrelationFSMDecoupled.scala 137:23]
        else : @[CorrelationFSMDecoupled.scala 139:20]
          node _T_4 = mul(xReg, yReg) @[CorrelationFSMDecoupled.scala 140:33]
          node _T_5 = add(accReg, _T_4) @[CorrelationFSMDecoupled.scala 140:26]
          node _T_6 = tail(_T_5, 1) @[CorrelationFSMDecoupled.scala 140:26]
          node _T_7 = asSInt(_T_6) @[CorrelationFSMDecoupled.scala 140:26]
          accReg <= _T_7 @[CorrelationFSMDecoupled.scala 140:16]
          skip @[CorrelationFSMDecoupled.scala 139:20]
        skip @[Conditional.scala 39:67]
    
  module CorrelationFSMDecoupled : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[CorrelationFSMDecoupled.scala 14:25]
    reg computingStageReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationFSMDecoupled.scala 17:34]
    reg x0Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 19:22]
    reg x1Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 20:22]
    reg x2Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 21:22]
    reg w0Reg : SInt, clock with : (reset => (reset, asSInt(UInt<2>("h01")))) @[CorrelationFSMDecoupled.scala 23:22]
    reg w1Reg : SInt, clock with : (reset => (reset, asSInt(UInt<3>("h02")))) @[CorrelationFSMDecoupled.scala 24:22]
    reg w2Reg : SInt, clock with : (reset => (reset, asSInt(UInt<3>("h03")))) @[CorrelationFSMDecoupled.scala 25:22]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDecoupled.scala 27:23]
    io.out.bits <= resReg @[CorrelationFSMDecoupled.scala 28:15]
    inst pe of DecoupledMultiplyAndAccumulate @[CorrelationFSMDecoupled.scala 30:18]
    pe.clock <= clock
    pe.reset <= reset
    node _T = eq(stateReg, UInt<3>("h00")) @[CorrelationFSMDecoupled.scala 32:27]
    io.in.ready <= _T @[CorrelationFSMDecoupled.scala 32:15]
    node _T_1 = eq(stateReg, UInt<3>("h03")) @[CorrelationFSMDecoupled.scala 33:28]
    io.out.valid <= _T_1 @[CorrelationFSMDecoupled.scala 33:16]
    pe.io.in.bits.x <= asSInt(UInt<1>("h00")) @[CorrelationFSMDecoupled.scala 35:19]
    pe.io.in.bits.y <= asSInt(UInt<1>("h00")) @[CorrelationFSMDecoupled.scala 36:19]
    pe.io.in.bits.reset <= UInt<1>("h00") @[CorrelationFSMDecoupled.scala 37:23]
    node _T_2 = eq(stateReg, UInt<3>("h01")) @[CorrelationFSMDecoupled.scala 38:31]
    node _T_3 = eq(stateReg, UInt<3>("h04")) @[CorrelationFSMDecoupled.scala 38:57]
    node _T_4 = or(_T_2, _T_3) @[CorrelationFSMDecoupled.scala 38:44]
    pe.io.in.valid <= _T_4 @[CorrelationFSMDecoupled.scala 38:18]
    node _T_5 = eq(stateReg, UInt<3>("h02")) @[CorrelationFSMDecoupled.scala 39:31]
    pe.io.out.ready <= _T_5 @[CorrelationFSMDecoupled.scala 39:19]
    node _T_6 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationFSMDecoupled.scala 43:25]
        x0Reg <= x1Reg @[CorrelationFSMDecoupled.scala 44:15]
        x1Reg <= x2Reg @[CorrelationFSMDecoupled.scala 45:15]
        x2Reg <= io.in.bits @[CorrelationFSMDecoupled.scala 46:15]
        stateReg <= UInt<3>("h01") @[CorrelationFSMDecoupled.scala 47:18]
        computingStageReg <= UInt<2>("h00") @[CorrelationFSMDecoupled.scala 48:27]
        skip @[CorrelationFSMDecoupled.scala 43:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<2>("h00"), computingStageReg) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 40:58]
          pe.io.in.bits.x <= x0Reg @[CorrelationFSMDecoupled.scala 54:27]
          pe.io.in.bits.y <= w0Reg @[CorrelationFSMDecoupled.scala 55:27]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_9 = eq(UInt<2>("h01"), computingStageReg) @[Conditional.scala 37:30]
          when _T_9 : @[Conditional.scala 39:67]
            pe.io.in.bits.x <= x1Reg @[CorrelationFSMDecoupled.scala 58:27]
            pe.io.in.bits.y <= w1Reg @[CorrelationFSMDecoupled.scala 59:27]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_10 = eq(UInt<2>("h02"), computingStageReg) @[Conditional.scala 37:30]
            when _T_10 : @[Conditional.scala 39:67]
              pe.io.in.bits.x <= x2Reg @[CorrelationFSMDecoupled.scala 62:27]
              pe.io.in.bits.y <= w2Reg @[CorrelationFSMDecoupled.scala 63:27]
              skip @[Conditional.scala 39:67]
        when pe.io.in.ready : @[CorrelationFSMDecoupled.scala 66:28]
          stateReg <= UInt<3>("h02") @[CorrelationFSMDecoupled.scala 67:18]
          skip @[CorrelationFSMDecoupled.scala 66:28]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          when pe.io.out.valid : @[CorrelationFSMDecoupled.scala 71:29]
            resReg <= pe.io.out.bits @[CorrelationFSMDecoupled.scala 72:16]
            node _T_12 = eq(UInt<2>("h00"), computingStageReg) @[Conditional.scala 37:30]
            when _T_12 : @[Conditional.scala 40:58]
              computingStageReg <= UInt<2>("h01") @[CorrelationFSMDecoupled.scala 76:31]
              stateReg <= UInt<3>("h01") @[CorrelationFSMDecoupled.scala 77:22]
              skip @[Conditional.scala 40:58]
            else : @[Conditional.scala 39:67]
              node _T_13 = eq(UInt<2>("h01"), computingStageReg) @[Conditional.scala 37:30]
              when _T_13 : @[Conditional.scala 39:67]
                computingStageReg <= UInt<2>("h02") @[CorrelationFSMDecoupled.scala 80:31]
                stateReg <= UInt<3>("h01") @[CorrelationFSMDecoupled.scala 81:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_14 = eq(UInt<2>("h02"), computingStageReg) @[Conditional.scala 37:30]
                when _T_14 : @[Conditional.scala 39:67]
                  stateReg <= UInt<3>("h03") @[CorrelationFSMDecoupled.scala 84:22]
                  skip @[Conditional.scala 39:67]
            skip @[CorrelationFSMDecoupled.scala 71:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_15 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_15 : @[Conditional.scala 39:67]
            when io.out.ready : @[CorrelationFSMDecoupled.scala 90:26]
              stateReg <= UInt<3>("h04") @[CorrelationFSMDecoupled.scala 91:18]
              skip @[CorrelationFSMDecoupled.scala 90:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_16 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_16 : @[Conditional.scala 39:67]
              when pe.io.in.ready : @[CorrelationFSMDecoupled.scala 95:28]
                pe.io.in.bits.reset <= UInt<1>("h01") @[CorrelationFSMDecoupled.scala 96:29]
                stateReg <= UInt<3>("h00") @[CorrelationFSMDecoupled.scala 97:18]
                skip @[CorrelationFSMDecoupled.scala 95:28]
              skip @[Conditional.scala 39:67]
    
