;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CorrelationFSMDoubleSync : 
  module SynchronizedMultiplyAndAccumulate : 
    input clock : Clock
    input reset : Reset
    output io : {flip x : SInt<32>, flip y : SInt<32>, flip reset : UInt<1>, out : SInt<32>}
    
    reg xReg : SInt, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[CorrelationFSMDoubleSync.scala 96:21]
    xReg <= io.x @[CorrelationFSMDoubleSync.scala 96:21]
    reg yReg : SInt, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[CorrelationFSMDoubleSync.scala 97:21]
    yReg <= io.y @[CorrelationFSMDoubleSync.scala 97:21]
    reg resetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[CorrelationFSMDoubleSync.scala 98:25]
    resetReg <= io.reset @[CorrelationFSMDoubleSync.scala 98:25]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDoubleSync.scala 100:23]
    io.out <= accReg @[CorrelationFSMDoubleSync.scala 101:10]
    when resetReg : @[CorrelationFSMDoubleSync.scala 103:19]
      accReg <= asSInt(UInt<1>("h00")) @[CorrelationFSMDoubleSync.scala 104:12]
      skip @[CorrelationFSMDoubleSync.scala 103:19]
    else : @[CorrelationFSMDoubleSync.scala 105:16]
      node _T = mul(xReg, yReg) @[CorrelationFSMDoubleSync.scala 106:29]
      node _T_1 = add(accReg, _T) @[CorrelationFSMDoubleSync.scala 106:22]
      node _T_2 = tail(_T_1, 1) @[CorrelationFSMDoubleSync.scala 106:22]
      node _T_3 = asSInt(_T_2) @[CorrelationFSMDoubleSync.scala 106:22]
      accReg <= _T_3 @[CorrelationFSMDoubleSync.scala 106:12]
      skip @[CorrelationFSMDoubleSync.scala 105:16]
    
  module CorrelationFSMDoubleSync : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationFSMDoubleSync.scala 13:25]
    reg computingStageReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationFSMDoubleSync.scala 16:34]
    reg x0Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDoubleSync.scala 18:22]
    reg x1Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDoubleSync.scala 19:22]
    reg x2Reg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationFSMDoubleSync.scala 20:22]
    reg w0Reg : SInt, clock with : (reset => (reset, asSInt(UInt<2>("h01")))) @[CorrelationFSMDoubleSync.scala 22:22]
    reg w1Reg : SInt, clock with : (reset => (reset, asSInt(UInt<3>("h02")))) @[CorrelationFSMDoubleSync.scala 23:22]
    reg w2Reg : SInt, clock with : (reset => (reset, asSInt(UInt<3>("h03")))) @[CorrelationFSMDoubleSync.scala 24:22]
    inst pe of SynchronizedMultiplyAndAccumulate @[CorrelationFSMDoubleSync.scala 26:18]
    pe.clock <= clock
    pe.reset <= reset
    pe.io.x <= asSInt(UInt<1>("h00")) @[CorrelationFSMDoubleSync.scala 28:11]
    pe.io.y <= asSInt(UInt<1>("h00")) @[CorrelationFSMDoubleSync.scala 29:11]
    pe.io.reset <= UInt<1>("h00") @[CorrelationFSMDoubleSync.scala 30:15]
    io.out.bits <= pe.io.out @[CorrelationFSMDoubleSync.scala 31:15]
    node _T = eq(stateReg, UInt<2>("h00")) @[CorrelationFSMDoubleSync.scala 33:27]
    io.in.ready <= _T @[CorrelationFSMDoubleSync.scala 33:15]
    node _T_1 = eq(stateReg, UInt<2>("h03")) @[CorrelationFSMDoubleSync.scala 34:28]
    io.out.valid <= _T_1 @[CorrelationFSMDoubleSync.scala 34:16]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationFSMDoubleSync.scala 38:25]
        x0Reg <= x1Reg @[CorrelationFSMDoubleSync.scala 39:15]
        x1Reg <= x2Reg @[CorrelationFSMDoubleSync.scala 40:15]
        x2Reg <= io.in.bits @[CorrelationFSMDoubleSync.scala 41:15]
        stateReg <= UInt<2>("h01") @[CorrelationFSMDoubleSync.scala 42:18]
        computingStageReg <= UInt<2>("h00") @[CorrelationFSMDoubleSync.scala 43:27]
        skip @[CorrelationFSMDoubleSync.scala 38:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        node _T_4 = eq(UInt<2>("h00"), computingStageReg) @[Conditional.scala 37:30]
        when _T_4 : @[Conditional.scala 40:58]
          pe.io.x <= x0Reg @[CorrelationFSMDoubleSync.scala 49:19]
          pe.io.y <= w0Reg @[CorrelationFSMDoubleSync.scala 50:19]
          skip @[Conditional.scala 40:58]
        else : @[Conditional.scala 39:67]
          node _T_5 = eq(UInt<2>("h01"), computingStageReg) @[Conditional.scala 37:30]
          when _T_5 : @[Conditional.scala 39:67]
            pe.io.x <= x1Reg @[CorrelationFSMDoubleSync.scala 53:19]
            pe.io.y <= w1Reg @[CorrelationFSMDoubleSync.scala 54:19]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_6 = eq(UInt<2>("h02"), computingStageReg) @[Conditional.scala 37:30]
            when _T_6 : @[Conditional.scala 39:67]
              pe.io.x <= x2Reg @[CorrelationFSMDoubleSync.scala 57:19]
              pe.io.y <= w2Reg @[CorrelationFSMDoubleSync.scala 58:19]
              skip @[Conditional.scala 39:67]
        stateReg <= UInt<2>("h02") @[CorrelationFSMDoubleSync.scala 62:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = eq(UInt<2>("h00"), computingStageReg) @[Conditional.scala 37:30]
          when _T_8 : @[Conditional.scala 40:58]
            computingStageReg <= UInt<2>("h01") @[CorrelationFSMDoubleSync.scala 67:29]
            stateReg <= UInt<2>("h01") @[CorrelationFSMDoubleSync.scala 68:20]
            skip @[Conditional.scala 40:58]
          else : @[Conditional.scala 39:67]
            node _T_9 = eq(UInt<2>("h01"), computingStageReg) @[Conditional.scala 37:30]
            when _T_9 : @[Conditional.scala 39:67]
              computingStageReg <= UInt<2>("h02") @[CorrelationFSMDoubleSync.scala 71:29]
              stateReg <= UInt<2>("h01") @[CorrelationFSMDoubleSync.scala 72:20]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_10 = eq(UInt<2>("h02"), computingStageReg) @[Conditional.scala 37:30]
              when _T_10 : @[Conditional.scala 39:67]
                stateReg <= UInt<2>("h03") @[CorrelationFSMDoubleSync.scala 75:20]
                skip @[Conditional.scala 39:67]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_11 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_11 : @[Conditional.scala 39:67]
            when io.out.ready : @[CorrelationFSMDoubleSync.scala 80:26]
              pe.io.reset <= UInt<1>("h01") @[CorrelationFSMDoubleSync.scala 81:21]
              stateReg <= UInt<2>("h00") @[CorrelationFSMDoubleSync.scala 82:18]
              skip @[CorrelationFSMDoubleSync.scala 80:26]
            skip @[Conditional.scala 39:67]
    
