;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit CorrelationSystolicDecoupled : 
  module DecoupledPE : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, w : SInt<32>, prev : SInt<32>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationSystolicDecoupled.scala 82:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 83:21]
    reg wReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 84:21]
    reg prevReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 85:24]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 86:23]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 87:23]
    io.out.bits <= resReg @[CorrelationSystolicDecoupled.scala 89:15]
    node _T = eq(stateReg, UInt<2>("h00")) @[CorrelationSystolicDecoupled.scala 90:27]
    io.in.ready <= _T @[CorrelationSystolicDecoupled.scala 90:15]
    node _T_1 = eq(stateReg, UInt<2>("h02")) @[CorrelationSystolicDecoupled.scala 91:28]
    io.out.valid <= _T_1 @[CorrelationSystolicDecoupled.scala 91:16]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationSystolicDecoupled.scala 95:25]
        xReg <= io.in.bits.x @[CorrelationSystolicDecoupled.scala 96:14]
        wReg <= io.in.bits.w @[CorrelationSystolicDecoupled.scala 97:14]
        prevReg <= io.in.bits.prev @[CorrelationSystolicDecoupled.scala 98:17]
        stateReg <= UInt<2>("h01") @[CorrelationSystolicDecoupled.scala 100:18]
        skip @[CorrelationSystolicDecoupled.scala 95:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        stateReg <= UInt<2>("h02") @[CorrelationSystolicDecoupled.scala 104:16]
        accReg <= prevReg @[CorrelationSystolicDecoupled.scala 105:14]
        node _T_4 = mul(xReg, wReg) @[CorrelationSystolicDecoupled.scala 106:31]
        node _T_5 = add(accReg, _T_4) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_6 = tail(_T_5, 1) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_7 = asSInt(_T_6) @[CorrelationSystolicDecoupled.scala 106:24]
        resReg <= _T_7 @[CorrelationSystolicDecoupled.scala 106:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          when io.out.ready : @[CorrelationSystolicDecoupled.scala 109:26]
            stateReg <= UInt<2>("h00") @[CorrelationSystolicDecoupled.scala 110:18]
            skip @[CorrelationSystolicDecoupled.scala 109:26]
          skip @[Conditional.scala 39:67]
    
  module DecoupledPE_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, w : SInt<32>, prev : SInt<32>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationSystolicDecoupled.scala 82:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 83:21]
    reg wReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 84:21]
    reg prevReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 85:24]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 86:23]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 87:23]
    io.out.bits <= resReg @[CorrelationSystolicDecoupled.scala 89:15]
    node _T = eq(stateReg, UInt<2>("h00")) @[CorrelationSystolicDecoupled.scala 90:27]
    io.in.ready <= _T @[CorrelationSystolicDecoupled.scala 90:15]
    node _T_1 = eq(stateReg, UInt<2>("h02")) @[CorrelationSystolicDecoupled.scala 91:28]
    io.out.valid <= _T_1 @[CorrelationSystolicDecoupled.scala 91:16]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationSystolicDecoupled.scala 95:25]
        xReg <= io.in.bits.x @[CorrelationSystolicDecoupled.scala 96:14]
        wReg <= io.in.bits.w @[CorrelationSystolicDecoupled.scala 97:14]
        prevReg <= io.in.bits.prev @[CorrelationSystolicDecoupled.scala 98:17]
        stateReg <= UInt<2>("h01") @[CorrelationSystolicDecoupled.scala 100:18]
        skip @[CorrelationSystolicDecoupled.scala 95:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        stateReg <= UInt<2>("h02") @[CorrelationSystolicDecoupled.scala 104:16]
        accReg <= prevReg @[CorrelationSystolicDecoupled.scala 105:14]
        node _T_4 = mul(xReg, wReg) @[CorrelationSystolicDecoupled.scala 106:31]
        node _T_5 = add(accReg, _T_4) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_6 = tail(_T_5, 1) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_7 = asSInt(_T_6) @[CorrelationSystolicDecoupled.scala 106:24]
        resReg <= _T_7 @[CorrelationSystolicDecoupled.scala 106:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          when io.out.ready : @[CorrelationSystolicDecoupled.scala 109:26]
            stateReg <= UInt<2>("h00") @[CorrelationSystolicDecoupled.scala 110:18]
            skip @[CorrelationSystolicDecoupled.scala 109:26]
          skip @[Conditional.scala 39:67]
    
  module DecoupledPE_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, w : SInt<32>, prev : SInt<32>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationSystolicDecoupled.scala 82:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 83:21]
    reg wReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 84:21]
    reg prevReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 85:24]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 86:23]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 87:23]
    io.out.bits <= resReg @[CorrelationSystolicDecoupled.scala 89:15]
    node _T = eq(stateReg, UInt<2>("h00")) @[CorrelationSystolicDecoupled.scala 90:27]
    io.in.ready <= _T @[CorrelationSystolicDecoupled.scala 90:15]
    node _T_1 = eq(stateReg, UInt<2>("h02")) @[CorrelationSystolicDecoupled.scala 91:28]
    io.out.valid <= _T_1 @[CorrelationSystolicDecoupled.scala 91:16]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationSystolicDecoupled.scala 95:25]
        xReg <= io.in.bits.x @[CorrelationSystolicDecoupled.scala 96:14]
        wReg <= io.in.bits.w @[CorrelationSystolicDecoupled.scala 97:14]
        prevReg <= io.in.bits.prev @[CorrelationSystolicDecoupled.scala 98:17]
        stateReg <= UInt<2>("h01") @[CorrelationSystolicDecoupled.scala 100:18]
        skip @[CorrelationSystolicDecoupled.scala 95:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        stateReg <= UInt<2>("h02") @[CorrelationSystolicDecoupled.scala 104:16]
        accReg <= prevReg @[CorrelationSystolicDecoupled.scala 105:14]
        node _T_4 = mul(xReg, wReg) @[CorrelationSystolicDecoupled.scala 106:31]
        node _T_5 = add(accReg, _T_4) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_6 = tail(_T_5, 1) @[CorrelationSystolicDecoupled.scala 106:24]
        node _T_7 = asSInt(_T_6) @[CorrelationSystolicDecoupled.scala 106:24]
        resReg <= _T_7 @[CorrelationSystolicDecoupled.scala 106:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_8 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_8 : @[Conditional.scala 39:67]
          when io.out.ready : @[CorrelationSystolicDecoupled.scala 109:26]
            stateReg <= UInt<2>("h00") @[CorrelationSystolicDecoupled.scala 110:18]
            skip @[CorrelationSystolicDecoupled.scala 109:26]
          skip @[Conditional.scala 39:67]
    
  module CorrelationSystolicDecoupled : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[CorrelationSystolicDecoupled.scala 13:25]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 15:23]
    io.out.bits <= resReg @[CorrelationSystolicDecoupled.scala 16:15]
    node _T = eq(stateReg, UInt<2>("h00")) @[CorrelationSystolicDecoupled.scala 17:27]
    io.in.ready <= _T @[CorrelationSystolicDecoupled.scala 17:15]
    node _T_1 = eq(stateReg, UInt<2>("h03")) @[CorrelationSystolicDecoupled.scala 18:28]
    io.out.valid <= _T_1 @[CorrelationSystolicDecoupled.scala 18:16]
    inst pe0 of DecoupledPE @[CorrelationSystolicDecoupled.scala 20:19]
    pe0.clock <= clock
    pe0.reset <= reset
    inst pe1 of DecoupledPE_1 @[CorrelationSystolicDecoupled.scala 21:19]
    pe1.clock <= clock
    pe1.reset <= reset
    inst pe2 of DecoupledPE_2 @[CorrelationSystolicDecoupled.scala 22:19]
    pe2.clock <= clock
    pe2.reset <= reset
    pe0.io.in.bits.prev <= asSInt(UInt<1>("h00")) @[CorrelationSystolicDecoupled.scala 24:23]
    pe1.io.in.bits.prev <= pe0.io.out.bits @[CorrelationSystolicDecoupled.scala 25:23]
    pe2.io.in.bits.prev <= pe1.io.out.bits @[CorrelationSystolicDecoupled.scala 26:23]
    pe0.io.in.bits.w <= asSInt(UInt<2>("h01")) @[CorrelationSystolicDecoupled.scala 28:20]
    pe1.io.in.bits.w <= asSInt(UInt<3>("h02")) @[CorrelationSystolicDecoupled.scala 29:20]
    pe2.io.in.bits.w <= asSInt(UInt<3>("h03")) @[CorrelationSystolicDecoupled.scala 30:20]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[CorrelationSystolicDecoupled.scala 32:21]
    pe0.io.in.bits.x <= xReg @[CorrelationSystolicDecoupled.scala 33:20]
    pe1.io.in.bits.x <= xReg @[CorrelationSystolicDecoupled.scala 34:20]
    pe2.io.in.bits.x <= xReg @[CorrelationSystolicDecoupled.scala 35:20]
    node _T_2 = eq(stateReg, UInt<2>("h01")) @[CorrelationSystolicDecoupled.scala 37:31]
    pe0.io.in.valid <= _T_2 @[CorrelationSystolicDecoupled.scala 37:19]
    pe1.io.in.valid <= pe0.io.out.valid @[CorrelationSystolicDecoupled.scala 38:19]
    pe2.io.in.valid <= pe1.io.out.valid @[CorrelationSystolicDecoupled.scala 39:19]
    pe0.io.out.ready <= pe1.io.in.ready @[CorrelationSystolicDecoupled.scala 41:20]
    pe1.io.out.ready <= pe2.io.in.ready @[CorrelationSystolicDecoupled.scala 42:20]
    node _T_3 = eq(stateReg, UInt<2>("h02")) @[CorrelationSystolicDecoupled.scala 43:32]
    pe2.io.out.ready <= _T_3 @[CorrelationSystolicDecoupled.scala 43:20]
    node _T_4 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_4 : @[Conditional.scala 40:58]
      when io.in.valid : @[CorrelationSystolicDecoupled.scala 47:25]
        xReg <= io.in.bits @[CorrelationSystolicDecoupled.scala 48:14]
        stateReg <= UInt<2>("h01") @[CorrelationSystolicDecoupled.scala 49:18]
        skip @[CorrelationSystolicDecoupled.scala 47:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_5 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_5 : @[Conditional.scala 39:67]
        when pe0.io.in.ready : @[CorrelationSystolicDecoupled.scala 53:29]
          stateReg <= UInt<2>("h02") @[CorrelationSystolicDecoupled.scala 54:18]
          skip @[CorrelationSystolicDecoupled.scala 53:29]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_6 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_6 : @[Conditional.scala 39:67]
          when pe2.io.out.valid : @[CorrelationSystolicDecoupled.scala 58:30]
            resReg <= pe2.io.out.bits @[CorrelationSystolicDecoupled.scala 59:16]
            stateReg <= UInt<2>("h03") @[CorrelationSystolicDecoupled.scala 60:18]
            skip @[CorrelationSystolicDecoupled.scala 58:30]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_7 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_7 : @[Conditional.scala 39:67]
            when io.out.ready : @[CorrelationSystolicDecoupled.scala 64:26]
              stateReg <= UInt<2>("h00") @[CorrelationSystolicDecoupled.scala 65:18]
              skip @[CorrelationSystolicDecoupled.scala 64:26]
            skip @[Conditional.scala 39:67]
    
