;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DotProductDecoupled : 
  module DecoupledMultiplyAndAccumulate : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>, reset : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DotProductDecoupled.scala 87:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 88:21]
    reg yReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 89:21]
    reg resetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[DotProductDecoupled.scala 90:25]
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 91:23]
    io.out.bits <= accReg @[DotProductDecoupled.scala 93:15]
    node _T = eq(stateReg, UInt<1>("h00")) @[DotProductDecoupled.scala 94:27]
    io.in.ready <= _T @[DotProductDecoupled.scala 94:15]
    node _T_1 = eq(stateReg, UInt<1>("h00")) @[DotProductDecoupled.scala 95:28]
    io.out.valid <= _T_1 @[DotProductDecoupled.scala 95:16]
    node _T_2 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[DotProductDecoupled.scala 99:25]
        xReg <= io.in.bits.x @[DotProductDecoupled.scala 100:14]
        yReg <= io.in.bits.y @[DotProductDecoupled.scala 101:14]
        resetReg <= io.in.bits.reset @[DotProductDecoupled.scala 102:18]
        stateReg <= UInt<1>("h01") @[DotProductDecoupled.scala 104:18]
        skip @[DotProductDecoupled.scala 99:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        stateReg <= UInt<1>("h00") @[DotProductDecoupled.scala 108:16]
        when resetReg : @[DotProductDecoupled.scala 110:23]
          accReg <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 111:16]
          skip @[DotProductDecoupled.scala 110:23]
        else : @[DotProductDecoupled.scala 112:20]
          node _T_4 = mul(xReg, yReg) @[DotProductDecoupled.scala 113:33]
          node _T_5 = add(accReg, _T_4) @[DotProductDecoupled.scala 113:26]
          node _T_6 = tail(_T_5, 1) @[DotProductDecoupled.scala 113:26]
          node _T_7 = asSInt(_T_6) @[DotProductDecoupled.scala 113:26]
          accReg <= _T_7 @[DotProductDecoupled.scala 113:16]
          skip @[DotProductDecoupled.scala 112:20]
        skip @[Conditional.scala 39:67]
    
  module DotProductDecoupled : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DotProductDecoupled.scala 16:25]
    reg xReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 17:21]
    reg yReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 18:21]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 19:23]
    reg cntReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h01"))) @[DotProductDecoupled.scala 20:23]
    inst pe of DecoupledMultiplyAndAccumulate @[DotProductDecoupled.scala 22:18]
    pe.clock <= clock
    pe.reset <= reset
    pe.io.in.bits.x <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 23:19]
    pe.io.in.bits.y <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 24:19]
    pe.io.in.bits.reset <= UInt<1>("h00") @[DotProductDecoupled.scala 25:23]
    node _T = eq(stateReg, UInt<3>("h01")) @[DotProductDecoupled.scala 26:31]
    node _T_1 = eq(stateReg, UInt<3>("h04")) @[DotProductDecoupled.scala 26:57]
    node _T_2 = or(_T, _T_1) @[DotProductDecoupled.scala 26:44]
    pe.io.in.valid <= _T_2 @[DotProductDecoupled.scala 26:18]
    node _T_3 = eq(stateReg, UInt<3>("h02")) @[DotProductDecoupled.scala 27:31]
    pe.io.out.ready <= _T_3 @[DotProductDecoupled.scala 27:19]
    io.out.bits <= resReg @[DotProductDecoupled.scala 29:15]
    node _T_4 = eq(stateReg, UInt<3>("h00")) @[DotProductDecoupled.scala 30:27]
    io.in.ready <= _T_4 @[DotProductDecoupled.scala 30:15]
    node _T_5 = eq(stateReg, UInt<3>("h03")) @[DotProductDecoupled.scala 31:28]
    io.out.valid <= _T_5 @[DotProductDecoupled.scala 31:16]
    node _T_6 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      when io.in.valid : @[DotProductDecoupled.scala 35:25]
        xReg <= io.in.bits.x @[DotProductDecoupled.scala 36:14]
        yReg <= io.in.bits.y @[DotProductDecoupled.scala 37:14]
        stateReg <= UInt<3>("h01") @[DotProductDecoupled.scala 38:18]
        skip @[DotProductDecoupled.scala 35:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        when pe.io.in.ready : @[DotProductDecoupled.scala 43:7]
          pe.io.in.bits.x <= xReg @[DotProductDecoupled.scala 44:25]
          pe.io.in.bits.y <= yReg @[DotProductDecoupled.scala 45:25]
          node _T_8 = add(cntReg, UInt<1>("h01")) @[DotProductDecoupled.scala 47:26]
          node _T_9 = tail(_T_8, 1) @[DotProductDecoupled.scala 47:26]
          cntReg <= _T_9 @[DotProductDecoupled.scala 47:16]
          node _T_10 = eq(cntReg, UInt<2>("h02")) @[DotProductDecoupled.scala 48:21]
          when _T_10 : @[DotProductDecoupled.scala 48:30]
            stateReg <= UInt<3>("h02") @[DotProductDecoupled.scala 49:20]
            skip @[DotProductDecoupled.scala 48:30]
          else : @[DotProductDecoupled.scala 50:22]
            stateReg <= UInt<3>("h00") @[DotProductDecoupled.scala 51:20]
            skip @[DotProductDecoupled.scala 50:22]
          skip @[DotProductDecoupled.scala 43:7]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_11 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_11 : @[Conditional.scala 39:67]
          when pe.io.out.valid : @[DotProductDecoupled.scala 56:29]
            resReg <= pe.io.out.bits @[DotProductDecoupled.scala 57:16]
            stateReg <= UInt<3>("h03") @[DotProductDecoupled.scala 58:18]
            skip @[DotProductDecoupled.scala 56:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_12 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_12 : @[Conditional.scala 39:67]
            when io.out.ready : @[DotProductDecoupled.scala 62:26]
              cntReg <= UInt<1>("h01") @[DotProductDecoupled.scala 63:16]
              stateReg <= UInt<3>("h04") @[DotProductDecoupled.scala 64:18]
              skip @[DotProductDecoupled.scala 62:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_13 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_13 : @[Conditional.scala 39:67]
              when pe.io.in.ready : @[DotProductDecoupled.scala 68:28]
                pe.io.in.bits.reset <= UInt<1>("h01") @[DotProductDecoupled.scala 69:29]
                stateReg <= UInt<3>("h00") @[DotProductDecoupled.scala 70:18]
                skip @[DotProductDecoupled.scala 68:28]
              skip @[Conditional.scala 39:67]
    
