;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit DotProductDecoupled : 
  module FastDecoupledMultiplyAndAccumulate : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>, y : SInt<32>, reset : UInt<1>}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    reg accReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 137:23]
    io.out.bits <= accReg @[DotProductDecoupled.scala 139:15]
    io.in.ready <= UInt<1>("h01") @[DotProductDecoupled.scala 140:15]
    io.out.valid <= UInt<1>("h01") @[DotProductDecoupled.scala 141:16]
    when io.in.valid : @[DotProductDecoupled.scala 143:21]
      when io.in.bits.reset : @[DotProductDecoupled.scala 144:29]
        accReg <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 145:14]
        skip @[DotProductDecoupled.scala 144:29]
      else : @[DotProductDecoupled.scala 146:18]
        node _T = mul(io.in.bits.x, io.in.bits.y) @[DotProductDecoupled.scala 147:39]
        node _T_1 = add(accReg, _T) @[DotProductDecoupled.scala 147:24]
        node _T_2 = tail(_T_1, 1) @[DotProductDecoupled.scala 147:24]
        node _T_3 = asSInt(_T_2) @[DotProductDecoupled.scala 147:24]
        accReg <= _T_3 @[DotProductDecoupled.scala 147:14]
        skip @[DotProductDecoupled.scala 146:18]
      skip @[DotProductDecoupled.scala 143:21]
    
  module DotProductDecoupled : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {x : SInt<32>[4], y : SInt<32>[4]}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : SInt<32>}}
    
    wire _WIRE : SInt<32>[4] @[DotProductDecoupled.scala 15:30]
    _WIRE[0] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 15:30]
    _WIRE[1] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 15:30]
    _WIRE[2] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 15:30]
    _WIRE[3] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 15:30]
    reg xRegs : SInt<32>[4], clock with : (reset => (reset, _WIRE)) @[DotProductDecoupled.scala 15:22]
    wire _WIRE_1 : SInt<32>[4] @[DotProductDecoupled.scala 16:30]
    _WIRE_1[0] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 16:30]
    _WIRE_1[1] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 16:30]
    _WIRE_1[2] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 16:30]
    _WIRE_1[3] <= asSInt(UInt<32>("h00")) @[DotProductDecoupled.scala 16:30]
    reg yRegs : SInt<32>[4], clock with : (reset => (reset, _WIRE_1)) @[DotProductDecoupled.scala 16:22]
    reg stateReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DotProductDecoupled.scala 19:25]
    reg resReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[DotProductDecoupled.scala 20:23]
    reg cntReg : UInt<3>, clock with : (reset => (reset, UInt<3>("h00"))) @[DotProductDecoupled.scala 21:23]
    inst pe of FastDecoupledMultiplyAndAccumulate @[DotProductDecoupled.scala 23:18]
    pe.clock <= clock
    pe.reset <= reset
    pe.io.in.bits.x <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 26:19]
    pe.io.in.bits.y <= asSInt(UInt<1>("h00")) @[DotProductDecoupled.scala 27:19]
    pe.io.in.bits.reset <= UInt<1>("h00") @[DotProductDecoupled.scala 28:23]
    node _T = eq(stateReg, UInt<3>("h01")) @[DotProductDecoupled.scala 29:31]
    node _T_1 = eq(stateReg, UInt<3>("h04")) @[DotProductDecoupled.scala 29:57]
    node _T_2 = or(_T, _T_1) @[DotProductDecoupled.scala 29:44]
    pe.io.in.valid <= _T_2 @[DotProductDecoupled.scala 29:18]
    node _T_3 = eq(stateReg, UInt<3>("h02")) @[DotProductDecoupled.scala 30:31]
    pe.io.out.ready <= _T_3 @[DotProductDecoupled.scala 30:19]
    io.out.bits <= resReg @[DotProductDecoupled.scala 32:15]
    node _T_4 = eq(stateReg, UInt<3>("h00")) @[DotProductDecoupled.scala 33:27]
    io.in.ready <= _T_4 @[DotProductDecoupled.scala 33:15]
    node _T_5 = eq(stateReg, UInt<3>("h03")) @[DotProductDecoupled.scala 34:28]
    io.out.valid <= _T_5 @[DotProductDecoupled.scala 34:16]
    node _T_6 = eq(UInt<3>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_6 : @[Conditional.scala 40:58]
      when io.in.valid : @[DotProductDecoupled.scala 38:25]
        xRegs[0] <= io.in.bits.x[0] @[DotProductDecoupled.scala 40:20]
        xRegs[1] <= io.in.bits.x[1] @[DotProductDecoupled.scala 40:20]
        xRegs[2] <= io.in.bits.x[2] @[DotProductDecoupled.scala 40:20]
        xRegs[3] <= io.in.bits.x[3] @[DotProductDecoupled.scala 40:20]
        yRegs[0] <= io.in.bits.y[0] @[DotProductDecoupled.scala 43:20]
        yRegs[1] <= io.in.bits.y[1] @[DotProductDecoupled.scala 43:20]
        yRegs[2] <= io.in.bits.y[2] @[DotProductDecoupled.scala 43:20]
        yRegs[3] <= io.in.bits.y[3] @[DotProductDecoupled.scala 43:20]
        cntReg <= UInt<1>("h00") @[DotProductDecoupled.scala 45:16]
        stateReg <= UInt<3>("h01") @[DotProductDecoupled.scala 46:18]
        skip @[DotProductDecoupled.scala 38:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_7 = eq(UInt<3>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_7 : @[Conditional.scala 39:67]
        when pe.io.in.ready : @[DotProductDecoupled.scala 51:7]
          node _T_8 = bits(cntReg, 1, 0)
          pe.io.in.bits.x <= xRegs[_T_8] @[DotProductDecoupled.scala 52:25]
          node _T_9 = bits(cntReg, 1, 0)
          pe.io.in.bits.y <= yRegs[_T_9] @[DotProductDecoupled.scala 53:25]
          stateReg <= UInt<3>("h02") @[DotProductDecoupled.scala 55:18]
          skip @[DotProductDecoupled.scala 51:7]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_10 = eq(UInt<3>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_10 : @[Conditional.scala 39:67]
          when pe.io.out.valid : @[DotProductDecoupled.scala 59:29]
            resReg <= pe.io.out.bits @[DotProductDecoupled.scala 60:16]
            node _T_11 = add(cntReg, UInt<1>("h01")) @[DotProductDecoupled.scala 61:26]
            node _T_12 = tail(_T_11, 1) @[DotProductDecoupled.scala 61:26]
            cntReg <= _T_12 @[DotProductDecoupled.scala 61:16]
            node _T_13 = eq(cntReg, UInt<2>("h03")) @[DotProductDecoupled.scala 63:21]
            when _T_13 : @[DotProductDecoupled.scala 63:34]
              stateReg <= UInt<3>("h03") @[DotProductDecoupled.scala 64:20]
              skip @[DotProductDecoupled.scala 63:34]
            else : @[DotProductDecoupled.scala 65:22]
              stateReg <= UInt<3>("h01") @[DotProductDecoupled.scala 66:20]
              skip @[DotProductDecoupled.scala 65:22]
            skip @[DotProductDecoupled.scala 59:29]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_14 = eq(UInt<3>("h03"), stateReg) @[Conditional.scala 37:30]
          when _T_14 : @[Conditional.scala 39:67]
            when io.out.ready : @[DotProductDecoupled.scala 71:26]
              stateReg <= UInt<3>("h04") @[DotProductDecoupled.scala 72:18]
              skip @[DotProductDecoupled.scala 71:26]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_15 = eq(UInt<3>("h04"), stateReg) @[Conditional.scala 37:30]
            when _T_15 : @[Conditional.scala 39:67]
              when pe.io.in.ready : @[DotProductDecoupled.scala 76:28]
                pe.io.in.bits.reset <= UInt<1>("h01") @[DotProductDecoupled.scala 77:29]
                stateReg <= UInt<3>("h00") @[DotProductDecoupled.scala 78:18]
                skip @[DotProductDecoupled.scala 76:28]
              skip @[Conditional.scala 39:67]
    
