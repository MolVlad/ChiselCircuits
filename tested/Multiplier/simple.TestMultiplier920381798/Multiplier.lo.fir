circuit Multiplier :
  module Multiplier :
    input clock : Clock
    input reset : UInt<1>
    input io_out_ready : UInt<1>
    output io_out_valid : UInt<1>
    output io_out_bits : UInt<8>
    output io_in_ready : UInt<1>
    input io_in_valid : UInt<1>
    input io_in_bits_x : UInt<4>
    input io_in_bits_y : UInt<4>

    reg stateReg : UInt<2>, clock with :
      reset => (UInt<1>("h0"), stateReg) @[Multiplier.scala 16:25]
    reg multStageReg : UInt<2>, clock with :
      reset => (UInt<1>("h0"), multStageReg) @[Multiplier.scala 18:29]
    node _T = eq(stateReg, UInt<2>("h0")) @[Multiplier.scala 20:27]
    node _T_1 = eq(stateReg, UInt<2>("h2")) @[Multiplier.scala 21:28]
    reg xReg : UInt<4>, clock with :
      reset => (UInt<1>("h0"), xReg) @[Multiplier.scala 23:21]
    reg yReg : UInt<4>, clock with :
      reset => (UInt<1>("h0"), yReg) @[Multiplier.scala 24:21]
    node _T_2 = bits(xReg, 1, 0) @[Multiplier.scala 31:13]
    node _T_3 = bits(xReg, 3, 2) @[Multiplier.scala 33:13]
    node _T_4 = bits(yReg, 1, 0) @[Multiplier.scala 35:13]
    node _T_5 = bits(yReg, 3, 2) @[Multiplier.scala 37:13]
    node _T_7 = eq(UInt<2>("h0"), stateReg) @[Conditional.scala 37:30]
    node _T_8 = eq(UInt<2>("h1"), stateReg) @[Conditional.scala 37:30]
    node _T_9 = eq(UInt<2>("h0"), multStageReg) @[Conditional.scala 37:30]
    node x1 = _T_3 @[Multiplier.scala 32:16 Multiplier.scala 33:6]
    node _T_11 = eq(UInt<2>("h1"), multStageReg) @[Conditional.scala 37:30]
    node x0 = _T_2 @[Multiplier.scala 30:16 Multiplier.scala 31:6]
    node _T_15 = eq(UInt<2>("h2"), multStageReg) @[Conditional.scala 37:30]
    node _T_19 = eq(UInt<2>("h3"), multStageReg) @[Conditional.scala 37:30]
    node _GEN_1 = mux(_T_19, x0, UInt<1>("h0")) @[Conditional.scala 39:67 Multiplier.scala 88:16 Multiplier.scala 48:8]
    node _GEN_6 = mux(_T_15, x1, _GEN_1) @[Conditional.scala 39:67 Multiplier.scala 81:16]
    node _GEN_11 = mux(_T_11, x0, _GEN_6) @[Conditional.scala 39:67 Multiplier.scala 74:16]
    node _GEN_16 = mux(_T_9, x1, _GEN_11) @[Conditional.scala 40:58 Multiplier.scala 67:16]
    node _GEN_23 = mux(_T_8, _GEN_16, UInt<1>("h0")) @[Conditional.scala 39:67 Multiplier.scala 48:8]
    node _GEN_29 = mux(_T_7, UInt<1>("h0"), _GEN_23) @[Conditional.scala 40:58 Multiplier.scala 48:8]
    node xMul = _GEN_29 @[Multiplier.scala 39:18]
    node y1 = _T_5 @[Multiplier.scala 36:16 Multiplier.scala 37:6]
    node y0 = _T_4 @[Multiplier.scala 34:16 Multiplier.scala 35:6]
    node _GEN_2 = mux(_T_19, y0, UInt<1>("h0")) @[Conditional.scala 39:67 Multiplier.scala 89:16 Multiplier.scala 49:8]
    node _GEN_7 = mux(_T_15, y0, _GEN_2) @[Conditional.scala 39:67 Multiplier.scala 82:16]
    node _GEN_12 = mux(_T_11, y1, _GEN_7) @[Conditional.scala 39:67 Multiplier.scala 75:16]
    node _GEN_17 = mux(_T_9, y1, _GEN_12) @[Conditional.scala 40:58 Multiplier.scala 68:16]
    node _GEN_24 = mux(_T_8, _GEN_17, UInt<1>("h0")) @[Conditional.scala 39:67 Multiplier.scala 49:8]
    node _GEN_30 = mux(_T_7, UInt<1>("h0"), _GEN_24) @[Conditional.scala 40:58 Multiplier.scala 49:8]
    node yMul = _GEN_30 @[Multiplier.scala 40:18]
    node _T_6 = mul(xMul, yMul) @[Multiplier.scala 43:18]
    reg resReg : UInt<8>, clock with :
      reset => (UInt<1>("h0"), resReg) @[Multiplier.scala 45:23]
    node _GEN_0 = mux(io_in_valid, UInt<2>("h1"), stateReg) @[Multiplier.scala 53:25 Multiplier.scala 54:18 Multiplier.scala 16:25]
    node resMul = _T_6 @[Multiplier.scala 41:20 Multiplier.scala 43:10]
    node _T_10 = dshl(resMul, UInt<3>("h4")) @[Multiplier.scala 69:28]
    node _T_12 = dshl(resMul, UInt<2>("h2")) @[Multiplier.scala 76:38]
    node _T_13 = add(resReg, _T_12) @[Multiplier.scala 76:28]
    node _T_14 = tail(_T_13, 1) @[Multiplier.scala 76:28]
    node _T_16 = dshl(resMul, UInt<2>("h2")) @[Multiplier.scala 83:38]
    node _T_17 = add(resReg, _T_16) @[Multiplier.scala 83:28]
    node _T_18 = tail(_T_17, 1) @[Multiplier.scala 83:28]
    node _T_20 = add(resReg, resMul) @[Multiplier.scala 90:28]
    node _T_21 = tail(_T_20, 1) @[Multiplier.scala 90:28]
    node _GEN_3 = mux(_T_19, _T_21, resReg) @[Conditional.scala 39:67 Multiplier.scala 90:18 Multiplier.scala 45:23]
    node _GEN_4 = mux(_T_19, UInt<2>("h0"), multStageReg) @[Conditional.scala 39:67 Multiplier.scala 92:24 Multiplier.scala 18:29]
    node _GEN_5 = mux(_T_19, UInt<2>("h2"), stateReg) @[Conditional.scala 39:67 Multiplier.scala 93:20 Multiplier.scala 16:25]
    node _GEN_8 = mux(_T_15, _T_18, _GEN_3) @[Conditional.scala 39:67 Multiplier.scala 83:18]
    node _GEN_9 = mux(_T_15, UInt<2>("h3"), _GEN_4) @[Conditional.scala 39:67 Multiplier.scala 85:24]
    node _GEN_10 = mux(_T_15, stateReg, _GEN_5) @[Conditional.scala 39:67 Multiplier.scala 16:25]
    node _GEN_13 = mux(_T_11, _T_14, _GEN_8) @[Conditional.scala 39:67 Multiplier.scala 76:18]
    node _GEN_14 = mux(_T_11, UInt<2>("h2"), _GEN_9) @[Conditional.scala 39:67 Multiplier.scala 78:24]
    node _GEN_15 = mux(_T_11, stateReg, _GEN_10) @[Conditional.scala 39:67 Multiplier.scala 16:25]
    node _GEN_18 = mux(_T_9, _T_10, _GEN_13) @[Conditional.scala 40:58 Multiplier.scala 69:18]
    node _GEN_19 = mux(_T_9, UInt<2>("h1"), _GEN_14) @[Conditional.scala 40:58 Multiplier.scala 71:24]
    node _GEN_20 = mux(_T_9, stateReg, _GEN_15) @[Conditional.scala 40:58 Multiplier.scala 16:25]
    node _T_22 = eq(UInt<2>("h2"), stateReg) @[Conditional.scala 37:30]
    node _GEN_21 = mux(io_out_ready, UInt<2>("h0"), stateReg) @[Multiplier.scala 98:26 Multiplier.scala 99:18 Multiplier.scala 16:25]
    node _GEN_22 = mux(_T_22, _GEN_21, stateReg) @[Conditional.scala 39:67 Multiplier.scala 16:25]
    node _GEN_25 = mux(_T_8, _GEN_18, resReg) @[Conditional.scala 39:67 Multiplier.scala 45:23]
    node _GEN_26 = mux(_T_8, _GEN_19, multStageReg) @[Conditional.scala 39:67 Multiplier.scala 18:29]
    node _GEN_27 = mux(_T_8, _GEN_20, _GEN_22) @[Conditional.scala 39:67]
    node _GEN_28 = mux(_T_7, _GEN_0, _GEN_27) @[Conditional.scala 40:58]
    node _GEN_31 = mux(_T_7, resReg, _GEN_25) @[Conditional.scala 40:58 Multiplier.scala 45:23]
    node _GEN_32 = mux(_T_7, multStageReg, _GEN_26) @[Conditional.scala 40:58 Multiplier.scala 18:29]
    io_out_valid <= _T_1 @[Multiplier.scala 21:16]
    io_out_bits <= resReg @[Multiplier.scala 46:15]
    io_in_ready <= _T @[Multiplier.scala 20:15]
    stateReg <= mux(reset, UInt<2>("h0"), _GEN_28) @[Multiplier.scala 16:25 Multiplier.scala 16:25]
    multStageReg <= mux(reset, UInt<2>("h0"), _GEN_32) @[Multiplier.scala 18:29 Multiplier.scala 18:29]
    xReg <= mux(reset, io_in_bits_x, xReg) @[Multiplier.scala 23:21 Multiplier.scala 23:21 Multiplier.scala 23:21]
    yReg <= mux(reset, io_in_bits_y, yReg) @[Multiplier.scala 24:21 Multiplier.scala 24:21 Multiplier.scala 24:21]
    resReg <= mux(reset, UInt<8>("h0"), bits(_GEN_31, 7, 0)) @[Multiplier.scala 45:23 Multiplier.scala 45:23]
