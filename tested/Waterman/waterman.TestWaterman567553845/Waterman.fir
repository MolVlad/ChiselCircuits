;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit Waterman : 
  module substituteElements : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[DNA.scala 26:10]
    node _T = eq(io.first, io.second) @[DNA.scala 27:18]
    when _T : @[DNA.scala 27:33]
      io.out <= asSInt(UInt<2>("h01")) @[DNA.scala 28:12]
      skip @[DNA.scala 27:33]
    else : @[DNA.scala 29:16]
      io.out <= asSInt(UInt<2>("h03")) @[DNA.scala 30:12]
      skip @[DNA.scala 29:16]
    
  module calculateCell : 
    input clock : Clock
    input reset : Reset
    output io : {flip upper : SInt<32>, flip left : SInt<32>, flip diagonal : SInt<32>, flip rowElement : UInt<2>, flip columnElement : UInt<2>, out : SInt<32>}
    
    inst substituteElements of substituteElements @[DNA.scala 46:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[DNA.scala 47:31]
    substituteElements.io.second <= io.columnElement @[DNA.scala 48:32]
    wire upper : SInt<32> @[DNA.scala 50:57]
    wire diag : SInt<32> @[DNA.scala 50:57]
    wire left : SInt<32> @[DNA.scala 50:57]
    wire diagUpper : SInt<32> @[DNA.scala 50:57]
    wire diagLeft : SInt<32> @[DNA.scala 50:57]
    wire max : SInt<32> @[DNA.scala 50:57]
    node _T = add(io.diagonal, substituteElements.io.out) @[DNA.scala 51:23]
    node _T_1 = tail(_T, 1) @[DNA.scala 51:23]
    node _T_2 = asSInt(_T_1) @[DNA.scala 51:23]
    diag <= _T_2 @[DNA.scala 51:8]
    node _T_3 = sub(io.upper, asSInt(UInt<3>("h02"))) @[DNA.scala 52:21]
    node _T_4 = tail(_T_3, 1) @[DNA.scala 52:21]
    node _T_5 = asSInt(_T_4) @[DNA.scala 52:21]
    upper <= _T_5 @[DNA.scala 52:9]
    node _T_6 = sub(io.left, asSInt(UInt<3>("h02"))) @[DNA.scala 53:19]
    node _T_7 = tail(_T_6, 1) @[DNA.scala 53:19]
    node _T_8 = asSInt(_T_7) @[DNA.scala 53:19]
    left <= _T_8 @[DNA.scala 53:8]
    node _T_9 = gt(diag, upper) @[DNA.scala 55:14]
    when _T_9 : @[DNA.scala 55:23]
      diagUpper <= diag @[DNA.scala 56:15]
      skip @[DNA.scala 55:23]
    else : @[DNA.scala 57:16]
      diagUpper <= upper @[DNA.scala 58:15]
      skip @[DNA.scala 57:16]
    node _T_10 = gt(diag, left) @[DNA.scala 60:14]
    when _T_10 : @[DNA.scala 60:22]
      diagLeft <= diag @[DNA.scala 61:14]
      skip @[DNA.scala 60:22]
    else : @[DNA.scala 62:16]
      diagLeft <= left @[DNA.scala 63:14]
      skip @[DNA.scala 62:16]
    node _T_11 = gt(diagLeft, diagUpper) @[DNA.scala 65:18]
    when _T_11 : @[DNA.scala 65:31]
      max <= diagLeft @[DNA.scala 66:9]
      skip @[DNA.scala 65:31]
    else : @[DNA.scala 67:16]
      max <= diagUpper @[DNA.scala 68:9]
      skip @[DNA.scala 67:16]
    node _T_12 = gt(max, asSInt(UInt<1>("h00"))) @[DNA.scala 72:15]
    when _T_12 : @[DNA.scala 72:36]
      io.out <= max @[DNA.scala 73:14]
      skip @[DNA.scala 72:36]
    else : @[DNA.scala 74:18]
      io.out <= asSInt(UInt<1>("h00")) @[DNA.scala 75:14]
      skip @[DNA.scala 74:18]
    
  module Waterman : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {S : UInt<2>[21], T : UInt<2>[15]}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}}
    
    wire _WIRE : UInt<2>[21] @[Waterman.scala 20:29]
    _WIRE[0] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[1] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[2] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[3] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[4] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[5] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[6] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[7] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[8] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[9] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[10] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[11] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[12] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[13] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[14] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[15] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[16] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[17] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[18] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[19] <= UInt<1>("h00") @[Waterman.scala 20:29]
    _WIRE[20] <= UInt<1>("h00") @[Waterman.scala 20:29]
    reg SReg : UInt<2>[21], clock with : (reset => (reset, _WIRE)) @[Waterman.scala 20:21]
    wire _WIRE_1 : UInt<2>[15] @[Waterman.scala 21:29]
    _WIRE_1[0] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[1] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[2] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[3] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[4] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[5] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[6] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[7] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[8] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[9] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[10] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[11] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[12] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[13] <= UInt<1>("h00") @[Waterman.scala 21:29]
    _WIRE_1[14] <= UInt<1>("h00") @[Waterman.scala 21:29]
    reg TReg : UInt<2>[15], clock with : (reset => (reset, _WIRE_1)) @[Waterman.scala 21:21]
    wire _WIRE_2 : SInt<32>[15] @[Waterman.scala 22:29]
    _WIRE_2[0] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[1] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[2] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[3] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[4] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[5] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[6] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[7] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[8] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[9] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[10] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[11] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[12] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[13] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    _WIRE_2[14] <= asSInt(UInt<32>("h00")) @[Waterman.scala 22:29]
    reg rows : SInt<32>[15], clock with : (reset => (reset, _WIRE_2)) @[Waterman.scala 22:21]
    wire _WIRE_3 : SInt<32>[22] @[Waterman.scala 23:32]
    _WIRE_3[0] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[1] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[2] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[3] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[4] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[5] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[6] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[7] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[8] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[9] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[10] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[11] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[12] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[13] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[14] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[15] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[16] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[17] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[18] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[19] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[20] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    _WIRE_3[21] <= asSInt(UInt<32>("h00")) @[Waterman.scala 23:32]
    reg columns : SInt<32>[22], clock with : (reset => (reset, _WIRE_3)) @[Waterman.scala 23:24]
    wire _WIRE_4 : SInt<32>[21] @[Waterman.scala 24:41]
    _WIRE_4[0] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[1] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[2] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[3] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[4] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[5] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[6] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[7] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[8] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[9] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[10] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[11] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[12] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[13] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[14] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[15] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[16] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[17] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[18] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[19] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    _WIRE_4[20] <= asSInt(UInt<32>("h00")) @[Waterman.scala 24:41]
    reg resultingColumns : SInt<32>[21], clock with : (reset => (reset, _WIRE_4)) @[Waterman.scala 24:33]
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[Waterman.scala 27:25]
    reg cntColumnReg : UInt<6>, clock with : (reset => (reset, UInt<6>("h00"))) @[Waterman.scala 28:29]
    reg cntRowReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[Waterman.scala 29:26]
    reg resReg : SInt, clock with : (reset => (reset, asSInt(UInt<1>("h00")))) @[Waterman.scala 30:23]
    inst pe of calculateCell @[Waterman.scala 32:18]
    pe.clock <= clock
    pe.reset <= reset
    pe.io.upper is invalid @[Waterman.scala 33:15]
    pe.io.diagonal is invalid @[Waterman.scala 34:18]
    pe.io.left is invalid @[Waterman.scala 35:14]
    pe.io.rowElement is invalid @[Waterman.scala 36:20]
    pe.io.columnElement is invalid @[Waterman.scala 37:23]
    io.out.bits.x <= cntColumnReg @[Waterman.scala 39:17]
    io.out.bits.y <= cntRowReg @[Waterman.scala 40:17]
    io.out.bits.score <= resReg @[Waterman.scala 41:21]
    node _T = eq(stateReg, UInt<2>("h03")) @[Waterman.scala 42:28]
    io.out.valid <= _T @[Waterman.scala 42:16]
    node _T_1 = eq(stateReg, UInt<2>("h00")) @[Waterman.scala 43:27]
    io.in.ready <= _T_1 @[Waterman.scala 43:15]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[Waterman.scala 47:25]
        node _T_3 = bits(reset, 0, 0) @[Waterman.scala 48:15]
        node _T_4 = eq(_T_3, UInt<1>("h00")) @[Waterman.scala 48:15]
        when _T_4 : @[Waterman.scala 48:15]
          printf(clock, UInt<1>(1), "\n") @[Waterman.scala 48:15]
          skip @[Waterman.scala 48:15]
        SReg[0] <= io.in.bits.S[0] @[Waterman.scala 50:19]
        SReg[1] <= io.in.bits.S[1] @[Waterman.scala 50:19]
        SReg[2] <= io.in.bits.S[2] @[Waterman.scala 50:19]
        SReg[3] <= io.in.bits.S[3] @[Waterman.scala 50:19]
        SReg[4] <= io.in.bits.S[4] @[Waterman.scala 50:19]
        SReg[5] <= io.in.bits.S[5] @[Waterman.scala 50:19]
        SReg[6] <= io.in.bits.S[6] @[Waterman.scala 50:19]
        SReg[7] <= io.in.bits.S[7] @[Waterman.scala 50:19]
        SReg[8] <= io.in.bits.S[8] @[Waterman.scala 50:19]
        SReg[9] <= io.in.bits.S[9] @[Waterman.scala 50:19]
        SReg[10] <= io.in.bits.S[10] @[Waterman.scala 50:19]
        SReg[11] <= io.in.bits.S[11] @[Waterman.scala 50:19]
        SReg[12] <= io.in.bits.S[12] @[Waterman.scala 50:19]
        SReg[13] <= io.in.bits.S[13] @[Waterman.scala 50:19]
        SReg[14] <= io.in.bits.S[14] @[Waterman.scala 50:19]
        SReg[15] <= io.in.bits.S[15] @[Waterman.scala 50:19]
        SReg[16] <= io.in.bits.S[16] @[Waterman.scala 50:19]
        SReg[17] <= io.in.bits.S[17] @[Waterman.scala 50:19]
        SReg[18] <= io.in.bits.S[18] @[Waterman.scala 50:19]
        SReg[19] <= io.in.bits.S[19] @[Waterman.scala 50:19]
        SReg[20] <= io.in.bits.S[20] @[Waterman.scala 50:19]
        TReg[0] <= io.in.bits.T[0] @[Waterman.scala 53:19]
        TReg[1] <= io.in.bits.T[1] @[Waterman.scala 53:19]
        TReg[2] <= io.in.bits.T[2] @[Waterman.scala 53:19]
        TReg[3] <= io.in.bits.T[3] @[Waterman.scala 53:19]
        TReg[4] <= io.in.bits.T[4] @[Waterman.scala 53:19]
        TReg[5] <= io.in.bits.T[5] @[Waterman.scala 53:19]
        TReg[6] <= io.in.bits.T[6] @[Waterman.scala 53:19]
        TReg[7] <= io.in.bits.T[7] @[Waterman.scala 53:19]
        TReg[8] <= io.in.bits.T[8] @[Waterman.scala 53:19]
        TReg[9] <= io.in.bits.T[9] @[Waterman.scala 53:19]
        TReg[10] <= io.in.bits.T[10] @[Waterman.scala 53:19]
        TReg[11] <= io.in.bits.T[11] @[Waterman.scala 53:19]
        TReg[12] <= io.in.bits.T[12] @[Waterman.scala 53:19]
        TReg[13] <= io.in.bits.T[13] @[Waterman.scala 53:19]
        TReg[14] <= io.in.bits.T[14] @[Waterman.scala 53:19]
        columns[0] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[1] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[2] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[3] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[4] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[5] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[6] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[7] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[8] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[9] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[10] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[11] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[12] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[13] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[14] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[15] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[16] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[17] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[18] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[19] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[20] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        columns[21] <= asSInt(UInt<1>("h00")) @[Waterman.scala 56:22]
        rows[0] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[1] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[2] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[3] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[4] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[5] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[6] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[7] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[8] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[9] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[10] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[11] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[12] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[13] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        rows[14] <= asSInt(UInt<1>("h00")) @[Waterman.scala 59:19]
        resultingColumns[0] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[1] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[2] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[3] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[4] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[5] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[6] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[7] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[8] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[9] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[10] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[11] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[12] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[13] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[14] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[15] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[16] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[17] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[18] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[19] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        resultingColumns[20] <= asSInt(UInt<1>("h00")) @[Waterman.scala 62:31]
        cntColumnReg <= UInt<1>("h00") @[Waterman.scala 65:22]
        cntRowReg <= UInt<1>("h00") @[Waterman.scala 66:19]
        stateReg <= UInt<2>("h01") @[Waterman.scala 67:18]
        skip @[Waterman.scala 47:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_5 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_5 : @[Conditional.scala 39:67]
        node _T_6 = add(cntColumnReg, UInt<1>("h01")) @[Waterman.scala 71:43]
        node _T_7 = tail(_T_6, 1) @[Waterman.scala 71:43]
        node _T_8 = bits(_T_7, 4, 0)
        pe.io.upper <= columns[_T_8] @[Waterman.scala 71:19]
        node _T_9 = bits(cntColumnReg, 4, 0)
        pe.io.diagonal <= columns[_T_9] @[Waterman.scala 72:22]
        node _T_10 = bits(cntRowReg, 3, 0)
        pe.io.left <= rows[_T_10] @[Waterman.scala 73:18]
        node _T_11 = bits(cntRowReg, 3, 0)
        pe.io.rowElement <= TReg[_T_11] @[Waterman.scala 74:24]
        node _T_12 = bits(cntColumnReg, 4, 0)
        pe.io.columnElement <= SReg[_T_12] @[Waterman.scala 75:27]
        resReg <= pe.io.out @[Waterman.scala 77:14]
        stateReg <= UInt<2>("h03") @[Waterman.scala 78:16]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_13 = eq(UInt<2>("h03"), stateReg) @[Conditional.scala 37:30]
        when _T_13 : @[Conditional.scala 39:67]
          when io.out.ready : @[Waterman.scala 81:26]
            node _T_14 = bits(cntColumnReg, 4, 0)
            resultingColumns[_T_14] <= resReg @[Waterman.scala 82:40]
            node _T_15 = bits(cntRowReg, 3, 0)
            rows[_T_15] <= resReg @[Waterman.scala 83:25]
            node _T_16 = bits(reset, 0, 0) @[Waterman.scala 84:15]
            node _T_17 = eq(_T_16, UInt<1>("h00")) @[Waterman.scala 84:15]
            when _T_17 : @[Waterman.scala 84:15]
              printf(clock, UInt<1>(1), "%d ", resReg) @[Waterman.scala 84:15]
              skip @[Waterman.scala 84:15]
            node _T_18 = eq(cntColumnReg, UInt<5>("h014")) @[Waterman.scala 86:28]
            node _T_19 = eq(cntRowReg, UInt<4>("h0e")) @[Waterman.scala 86:69]
            node _T_20 = and(_T_18, _T_19) @[Waterman.scala 86:55]
            when _T_20 : @[Waterman.scala 86:94]
              stateReg <= UInt<2>("h00") @[Waterman.scala 87:20]
              node _T_21 = bits(reset, 0, 0) @[Waterman.scala 88:17]
              node _T_22 = eq(_T_21, UInt<1>("h00")) @[Waterman.scala 88:17]
              when _T_22 : @[Waterman.scala 88:17]
                printf(clock, UInt<1>(1), "\n") @[Waterman.scala 88:17]
                skip @[Waterman.scala 88:17]
              skip @[Waterman.scala 86:94]
            else : @[Waterman.scala 89:61]
              node _T_23 = eq(cntColumnReg, UInt<5>("h014")) @[Waterman.scala 89:34]
              when _T_23 : @[Waterman.scala 89:61]
                cntColumnReg <= UInt<1>("h00") @[Waterman.scala 90:24]
                node _T_24 = add(cntRowReg, UInt<1>("h01")) @[Waterman.scala 91:34]
                node _T_25 = tail(_T_24, 1) @[Waterman.scala 91:34]
                cntRowReg <= _T_25 @[Waterman.scala 91:21]
                node _T_26 = bits(reset, 0, 0) @[Waterman.scala 92:17]
                node _T_27 = eq(_T_26, UInt<1>("h00")) @[Waterman.scala 92:17]
                when _T_27 : @[Waterman.scala 92:17]
                  printf(clock, UInt<1>(1), "\n") @[Waterman.scala 92:17]
                  skip @[Waterman.scala 92:17]
                stateReg <= UInt<2>("h02") @[Waterman.scala 93:20]
                skip @[Waterman.scala 89:61]
              else : @[Waterman.scala 94:22]
                node _T_28 = add(cntColumnReg, UInt<1>("h01")) @[Waterman.scala 95:40]
                node _T_29 = tail(_T_28, 1) @[Waterman.scala 95:40]
                cntColumnReg <= _T_29 @[Waterman.scala 95:24]
                stateReg <= UInt<2>("h01") @[Waterman.scala 96:20]
                skip @[Waterman.scala 94:22]
            skip @[Waterman.scala 81:26]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_30 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
          when _T_30 : @[Conditional.scala 39:67]
            columns[1] <= resultingColumns[0] @[Waterman.scala 102:24]
            columns[2] <= resultingColumns[1] @[Waterman.scala 102:24]
            columns[3] <= resultingColumns[2] @[Waterman.scala 102:24]
            columns[4] <= resultingColumns[3] @[Waterman.scala 102:24]
            columns[5] <= resultingColumns[4] @[Waterman.scala 102:24]
            columns[6] <= resultingColumns[5] @[Waterman.scala 102:24]
            columns[7] <= resultingColumns[6] @[Waterman.scala 102:24]
            columns[8] <= resultingColumns[7] @[Waterman.scala 102:24]
            columns[9] <= resultingColumns[8] @[Waterman.scala 102:24]
            columns[10] <= resultingColumns[9] @[Waterman.scala 102:24]
            columns[11] <= resultingColumns[10] @[Waterman.scala 102:24]
            columns[12] <= resultingColumns[11] @[Waterman.scala 102:24]
            columns[13] <= resultingColumns[12] @[Waterman.scala 102:24]
            columns[14] <= resultingColumns[13] @[Waterman.scala 102:24]
            columns[15] <= resultingColumns[14] @[Waterman.scala 102:24]
            columns[16] <= resultingColumns[15] @[Waterman.scala 102:24]
            columns[17] <= resultingColumns[16] @[Waterman.scala 102:24]
            columns[18] <= resultingColumns[17] @[Waterman.scala 102:24]
            columns[19] <= resultingColumns[18] @[Waterman.scala 102:24]
            columns[20] <= resultingColumns[19] @[Waterman.scala 102:24]
            columns[21] <= resultingColumns[20] @[Waterman.scala 102:24]
            stateReg <= UInt<2>("h01") @[Waterman.scala 104:16]
            skip @[Conditional.scala 39:67]
    
