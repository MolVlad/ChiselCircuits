;buildInfoPackage: chisel3, version: 3.4.2, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit WatermanSystolic : 
  module substituteElements : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_1 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_1 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_2 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_2 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_3 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_3 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_4 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_5 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_5 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_6 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_6 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_7 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_7 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_8 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_8 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_9 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_9 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_10 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_10 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_11 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_11 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_12 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_12 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_13 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_13 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module substituteElements_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip first : UInt<2>, flip second : UInt<2>, out : SInt<32>}
    
    io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 211:10]
    node _T = eq(io.first, io.second) @[WatermanSystolic.scala 212:18]
    when _T : @[WatermanSystolic.scala 212:33]
      io.out <= asSInt(UInt<2>("h01")) @[WatermanSystolic.scala 213:12]
      skip @[WatermanSystolic.scala 212:33]
    else : @[WatermanSystolic.scala 214:16]
      io.out <= asSInt(UInt<2>("h03")) @[WatermanSystolic.scala 215:12]
      skip @[WatermanSystolic.scala 214:16]
    
  module processingElementDecoupled_14 : 
    input clock : Clock
    input reset : Reset
    output io : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}
    
    reg stateReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 113:25]
    reg toNextPeValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 114:33]
    reg scoreValidReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 115:30]
    reg previousScore : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 116:30]
    reg leftReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 117:24]
    reg diagReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 118:24]
    reg upperReg : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[WatermanSystolic.scala 119:25]
    reg columnElementReg : UInt<2>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 120:33]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 121:24]
    inst substituteElements of substituteElements_14 @[WatermanSystolic.scala 123:34]
    substituteElements.clock <= clock
    substituteElements.reset <= reset
    substituteElements.io.first <= io.rowElement @[WatermanSystolic.scala 124:31]
    substituteElements.io.second <= columnElementReg @[WatermanSystolic.scala 125:32]
    wire upper : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diag : SInt<32> @[WatermanSystolic.scala 126:31]
    wire left : SInt<32> @[WatermanSystolic.scala 126:31]
    wire diagOrUpper : SInt<32> @[WatermanSystolic.scala 127:49]
    wire diagOrLeft : SInt<32> @[WatermanSystolic.scala 127:49]
    wire max : SInt<32> @[WatermanSystolic.scala 127:49]
    wire score : SInt<32> @[WatermanSystolic.scala 127:49]
    node _T = add(diagReg, substituteElements.io.out) @[WatermanSystolic.scala 128:19]
    node _T_1 = tail(_T, 1) @[WatermanSystolic.scala 128:19]
    node _T_2 = asSInt(_T_1) @[WatermanSystolic.scala 128:19]
    diag <= _T_2 @[WatermanSystolic.scala 128:8]
    node _T_3 = sub(upperReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 129:21]
    node _T_4 = tail(_T_3, 1) @[WatermanSystolic.scala 129:21]
    node _T_5 = asSInt(_T_4) @[WatermanSystolic.scala 129:21]
    upper <= _T_5 @[WatermanSystolic.scala 129:9]
    node _T_6 = sub(leftReg, asSInt(UInt<3>("h02"))) @[WatermanSystolic.scala 130:19]
    node _T_7 = tail(_T_6, 1) @[WatermanSystolic.scala 130:19]
    node _T_8 = asSInt(_T_7) @[WatermanSystolic.scala 130:19]
    left <= _T_8 @[WatermanSystolic.scala 130:8]
    node _T_9 = eq(stateReg, UInt<1>("h00")) @[WatermanSystolic.scala 132:39]
    io.fromPreviousPE.ready <= _T_9 @[WatermanSystolic.scala 132:27]
    io.toNextPE.valid <= toNextPeValidReg @[WatermanSystolic.scala 133:21]
    io.out.valid <= scoreValidReg @[WatermanSystolic.scala 134:16]
    io.out.bits.score <= score @[WatermanSystolic.scala 135:21]
    io.out.bits.y <= io.number @[WatermanSystolic.scala 136:17]
    io.out.bits.x <= stepReg @[WatermanSystolic.scala 137:17]
    io.toNextPE.bits.upper <= score @[WatermanSystolic.scala 138:26]
    io.toNextPE.bits.diagonal <= previousScore @[WatermanSystolic.scala 139:29]
    io.toNextPE.bits.columnElement <= columnElementReg @[WatermanSystolic.scala 140:34]
    node _T_10 = gt(diag, upper) @[WatermanSystolic.scala 142:13]
    when _T_10 : @[WatermanSystolic.scala 142:22]
      diagOrUpper <= diag @[WatermanSystolic.scala 143:17]
      skip @[WatermanSystolic.scala 142:22]
    else : @[WatermanSystolic.scala 144:15]
      diagOrUpper <= upper @[WatermanSystolic.scala 145:17]
      skip @[WatermanSystolic.scala 144:15]
    node _T_11 = gt(diag, left) @[WatermanSystolic.scala 147:13]
    when _T_11 : @[WatermanSystolic.scala 147:21]
      diagOrLeft <= diag @[WatermanSystolic.scala 148:16]
      skip @[WatermanSystolic.scala 147:21]
    else : @[WatermanSystolic.scala 149:15]
      diagOrLeft <= left @[WatermanSystolic.scala 150:16]
      skip @[WatermanSystolic.scala 149:15]
    node _T_12 = gt(diagOrLeft, diagOrUpper) @[WatermanSystolic.scala 152:19]
    when _T_12 : @[WatermanSystolic.scala 152:34]
      max <= diagOrLeft @[WatermanSystolic.scala 153:9]
      skip @[WatermanSystolic.scala 152:34]
    else : @[WatermanSystolic.scala 154:15]
      max <= diagOrUpper @[WatermanSystolic.scala 155:9]
      skip @[WatermanSystolic.scala 154:15]
    node _T_13 = gt(max, asSInt(UInt<1>("h00"))) @[WatermanSystolic.scala 159:14]
    when _T_13 : @[WatermanSystolic.scala 159:35]
      score <= max @[WatermanSystolic.scala 160:13]
      skip @[WatermanSystolic.scala 159:35]
    else : @[WatermanSystolic.scala 161:17]
      score <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 162:13]
      skip @[WatermanSystolic.scala 161:17]
    when io.reset : @[WatermanSystolic.scala 168:18]
      previousScore <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 169:19]
      leftReg <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 170:13]
      stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 171:13]
      stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 172:14]
      skip @[WatermanSystolic.scala 168:18]
    else : @[WatermanSystolic.scala 173:15]
      node _T_14 = eq(UInt<1>("h00"), stateReg) @[Conditional.scala 37:30]
      when _T_14 : @[Conditional.scala 40:58]
        when io.fromPreviousPE.valid : @[WatermanSystolic.scala 176:39]
          upperReg <= io.fromPreviousPE.bits.upper @[WatermanSystolic.scala 177:20]
          diagReg <= io.fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 178:19]
          columnElementReg <= io.fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 179:28]
          scoreValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 181:25]
          toNextPeValidReg <= UInt<1>("h01") @[WatermanSystolic.scala 182:28]
          stateReg <= UInt<1>("h01") @[WatermanSystolic.scala 183:20]
          skip @[WatermanSystolic.scala 176:39]
        skip @[Conditional.scala 40:58]
      else : @[Conditional.scala 39:67]
        node _T_15 = eq(UInt<1>("h01"), stateReg) @[Conditional.scala 37:30]
        when _T_15 : @[Conditional.scala 39:67]
          when io.out.ready : @[WatermanSystolic.scala 187:28]
            scoreValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 188:25]
            skip @[WatermanSystolic.scala 187:28]
          when io.toNextPE.ready : @[WatermanSystolic.scala 190:33]
            toNextPeValidReg <= UInt<1>("h00") @[WatermanSystolic.scala 191:28]
            skip @[WatermanSystolic.scala 190:33]
          node _T_16 = or(scoreValidReg, toNextPeValidReg) @[WatermanSystolic.scala 193:30]
          node _T_17 = eq(_T_16, UInt<1>("h00")) @[WatermanSystolic.scala 193:14]
          when _T_17 : @[WatermanSystolic.scala 193:52]
            previousScore <= score @[WatermanSystolic.scala 194:25]
            stateReg <= UInt<1>("h00") @[WatermanSystolic.scala 195:20]
            node _T_18 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 196:30]
            node _T_19 = tail(_T_18, 1) @[WatermanSystolic.scala 196:30]
            stepReg <= _T_19 @[WatermanSystolic.scala 196:19]
            leftReg <= score @[WatermanSystolic.scala 197:19]
            skip @[WatermanSystolic.scala 193:52]
          skip @[Conditional.scala 39:67]
      skip @[WatermanSystolic.scala 173:15]
    
  module WatermanSystolic : 
    input clock : Clock
    input reset : UInt<1>
    output io : {flip in : {flip ready : UInt<1>, valid : UInt<1>, bits : {S : UInt<2>[21], T : UInt<2>[15]}}, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}[15]}
    
    reg stateReg : UInt<2>, clock with : (reset => (reset, UInt<2>("h00"))) @[WatermanSystolic.scala 19:25]
    reg stepReg : UInt<5>, clock with : (reset => (reset, UInt<5>("h00"))) @[WatermanSystolic.scala 20:24]
    wire _WIRE : UInt<2>[15] @[WatermanSystolic.scala 21:29]
    _WIRE[0] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[1] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[2] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[3] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[4] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[5] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[6] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[7] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[8] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[9] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[10] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[11] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[12] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[13] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    _WIRE[14] <= UInt<1>("h00") @[WatermanSystolic.scala 21:29]
    reg TReg : UInt<2>[15], clock with : (reset => (reset, _WIRE)) @[WatermanSystolic.scala 21:21]
    wire _WIRE_1 : UInt<2>[21] @[WatermanSystolic.scala 22:29]
    _WIRE_1[0] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[1] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[2] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[3] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[4] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[5] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[6] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[7] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[8] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[9] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[10] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[11] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[12] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[13] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[14] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[15] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[16] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[17] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[18] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[19] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    _WIRE_1[20] <= UInt<1>("h00") @[WatermanSystolic.scala 22:29]
    reg SReg : UInt<2>[21], clock with : (reset => (reset, _WIRE_1)) @[WatermanSystolic.scala 22:21]
    reg resetReg : UInt<1>, clock with : (reset => (reset, UInt<1>("h00"))) @[WatermanSystolic.scala 23:25]
    inst processingElementDecoupled of processingElementDecoupled @[WatermanSystolic.scala 26:11]
    processingElementDecoupled.clock <= clock
    processingElementDecoupled.reset <= reset
    inst processingElementDecoupled_1 of processingElementDecoupled_1 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_1.clock <= clock
    processingElementDecoupled_1.reset <= reset
    inst processingElementDecoupled_2 of processingElementDecoupled_2 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_2.clock <= clock
    processingElementDecoupled_2.reset <= reset
    inst processingElementDecoupled_3 of processingElementDecoupled_3 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_3.clock <= clock
    processingElementDecoupled_3.reset <= reset
    inst processingElementDecoupled_4 of processingElementDecoupled_4 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_4.clock <= clock
    processingElementDecoupled_4.reset <= reset
    inst processingElementDecoupled_5 of processingElementDecoupled_5 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_5.clock <= clock
    processingElementDecoupled_5.reset <= reset
    inst processingElementDecoupled_6 of processingElementDecoupled_6 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_6.clock <= clock
    processingElementDecoupled_6.reset <= reset
    inst processingElementDecoupled_7 of processingElementDecoupled_7 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_7.clock <= clock
    processingElementDecoupled_7.reset <= reset
    inst processingElementDecoupled_8 of processingElementDecoupled_8 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_8.clock <= clock
    processingElementDecoupled_8.reset <= reset
    inst processingElementDecoupled_9 of processingElementDecoupled_9 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_9.clock <= clock
    processingElementDecoupled_9.reset <= reset
    inst processingElementDecoupled_10 of processingElementDecoupled_10 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_10.clock <= clock
    processingElementDecoupled_10.reset <= reset
    inst processingElementDecoupled_11 of processingElementDecoupled_11 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_11.clock <= clock
    processingElementDecoupled_11.reset <= reset
    inst processingElementDecoupled_12 of processingElementDecoupled_12 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_12.clock <= clock
    processingElementDecoupled_12.reset <= reset
    inst processingElementDecoupled_13 of processingElementDecoupled_13 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_13.clock <= clock
    processingElementDecoupled_13.reset <= reset
    inst processingElementDecoupled_14 of processingElementDecoupled_14 @[WatermanSystolic.scala 26:11]
    processingElementDecoupled_14.clock <= clock
    processingElementDecoupled_14.reset <= reset
    wire PEs : {flip fromPreviousPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}, flip rowElement : UInt<2>, flip reset : UInt<1>, flip number : UInt<32>, out : {flip ready : UInt<1>, valid : UInt<1>, bits : {score : SInt<32>, x : UInt<5>, y : UInt<4>}}, toNextPE : {flip ready : UInt<1>, valid : UInt<1>, bits : {upper : SInt<32>, diagonal : SInt<32>, columnElement : UInt<2>}}}[15] @[WatermanSystolic.scala 25:20]
    PEs[0].toNextPE.bits.columnElement <= processingElementDecoupled.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[0].toNextPE.bits.diagonal <= processingElementDecoupled.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[0].toNextPE.bits.upper <= processingElementDecoupled.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[0].toNextPE.valid <= processingElementDecoupled.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.toNextPE.ready <= PEs[0].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[0].out.bits.y <= processingElementDecoupled.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[0].out.bits.x <= processingElementDecoupled.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[0].out.bits.score <= processingElementDecoupled.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[0].out.valid <= processingElementDecoupled.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.out.ready <= PEs[0].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.number <= PEs[0].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.reset <= PEs[0].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.rowElement <= PEs[0].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.fromPreviousPE.bits.columnElement <= PEs[0].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.fromPreviousPE.bits.diagonal <= PEs[0].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.fromPreviousPE.bits.upper <= PEs[0].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled.io.fromPreviousPE.valid <= PEs[0].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[0].fromPreviousPE.ready <= processingElementDecoupled.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[1].toNextPE.bits.columnElement <= processingElementDecoupled_1.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[1].toNextPE.bits.diagonal <= processingElementDecoupled_1.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[1].toNextPE.bits.upper <= processingElementDecoupled_1.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[1].toNextPE.valid <= processingElementDecoupled_1.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.toNextPE.ready <= PEs[1].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[1].out.bits.y <= processingElementDecoupled_1.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[1].out.bits.x <= processingElementDecoupled_1.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[1].out.bits.score <= processingElementDecoupled_1.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[1].out.valid <= processingElementDecoupled_1.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.out.ready <= PEs[1].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.number <= PEs[1].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.reset <= PEs[1].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.rowElement <= PEs[1].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.fromPreviousPE.bits.columnElement <= PEs[1].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.fromPreviousPE.bits.diagonal <= PEs[1].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.fromPreviousPE.bits.upper <= PEs[1].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_1.io.fromPreviousPE.valid <= PEs[1].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[1].fromPreviousPE.ready <= processingElementDecoupled_1.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[2].toNextPE.bits.columnElement <= processingElementDecoupled_2.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[2].toNextPE.bits.diagonal <= processingElementDecoupled_2.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[2].toNextPE.bits.upper <= processingElementDecoupled_2.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[2].toNextPE.valid <= processingElementDecoupled_2.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.toNextPE.ready <= PEs[2].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[2].out.bits.y <= processingElementDecoupled_2.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[2].out.bits.x <= processingElementDecoupled_2.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[2].out.bits.score <= processingElementDecoupled_2.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[2].out.valid <= processingElementDecoupled_2.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.out.ready <= PEs[2].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.number <= PEs[2].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.reset <= PEs[2].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.rowElement <= PEs[2].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.fromPreviousPE.bits.columnElement <= PEs[2].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.fromPreviousPE.bits.diagonal <= PEs[2].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.fromPreviousPE.bits.upper <= PEs[2].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_2.io.fromPreviousPE.valid <= PEs[2].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[2].fromPreviousPE.ready <= processingElementDecoupled_2.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[3].toNextPE.bits.columnElement <= processingElementDecoupled_3.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[3].toNextPE.bits.diagonal <= processingElementDecoupled_3.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[3].toNextPE.bits.upper <= processingElementDecoupled_3.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[3].toNextPE.valid <= processingElementDecoupled_3.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.toNextPE.ready <= PEs[3].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[3].out.bits.y <= processingElementDecoupled_3.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[3].out.bits.x <= processingElementDecoupled_3.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[3].out.bits.score <= processingElementDecoupled_3.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[3].out.valid <= processingElementDecoupled_3.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.out.ready <= PEs[3].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.number <= PEs[3].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.reset <= PEs[3].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.rowElement <= PEs[3].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.fromPreviousPE.bits.columnElement <= PEs[3].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.fromPreviousPE.bits.diagonal <= PEs[3].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.fromPreviousPE.bits.upper <= PEs[3].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_3.io.fromPreviousPE.valid <= PEs[3].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[3].fromPreviousPE.ready <= processingElementDecoupled_3.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[4].toNextPE.bits.columnElement <= processingElementDecoupled_4.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[4].toNextPE.bits.diagonal <= processingElementDecoupled_4.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[4].toNextPE.bits.upper <= processingElementDecoupled_4.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[4].toNextPE.valid <= processingElementDecoupled_4.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.toNextPE.ready <= PEs[4].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[4].out.bits.y <= processingElementDecoupled_4.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[4].out.bits.x <= processingElementDecoupled_4.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[4].out.bits.score <= processingElementDecoupled_4.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[4].out.valid <= processingElementDecoupled_4.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.out.ready <= PEs[4].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.number <= PEs[4].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.reset <= PEs[4].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.rowElement <= PEs[4].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.fromPreviousPE.bits.columnElement <= PEs[4].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.fromPreviousPE.bits.diagonal <= PEs[4].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.fromPreviousPE.bits.upper <= PEs[4].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_4.io.fromPreviousPE.valid <= PEs[4].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[4].fromPreviousPE.ready <= processingElementDecoupled_4.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[5].toNextPE.bits.columnElement <= processingElementDecoupled_5.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[5].toNextPE.bits.diagonal <= processingElementDecoupled_5.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[5].toNextPE.bits.upper <= processingElementDecoupled_5.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[5].toNextPE.valid <= processingElementDecoupled_5.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.toNextPE.ready <= PEs[5].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[5].out.bits.y <= processingElementDecoupled_5.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[5].out.bits.x <= processingElementDecoupled_5.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[5].out.bits.score <= processingElementDecoupled_5.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[5].out.valid <= processingElementDecoupled_5.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.out.ready <= PEs[5].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.number <= PEs[5].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.reset <= PEs[5].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.rowElement <= PEs[5].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.fromPreviousPE.bits.columnElement <= PEs[5].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.fromPreviousPE.bits.diagonal <= PEs[5].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.fromPreviousPE.bits.upper <= PEs[5].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_5.io.fromPreviousPE.valid <= PEs[5].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[5].fromPreviousPE.ready <= processingElementDecoupled_5.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[6].toNextPE.bits.columnElement <= processingElementDecoupled_6.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[6].toNextPE.bits.diagonal <= processingElementDecoupled_6.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[6].toNextPE.bits.upper <= processingElementDecoupled_6.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[6].toNextPE.valid <= processingElementDecoupled_6.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.toNextPE.ready <= PEs[6].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[6].out.bits.y <= processingElementDecoupled_6.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[6].out.bits.x <= processingElementDecoupled_6.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[6].out.bits.score <= processingElementDecoupled_6.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[6].out.valid <= processingElementDecoupled_6.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.out.ready <= PEs[6].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.number <= PEs[6].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.reset <= PEs[6].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.rowElement <= PEs[6].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.fromPreviousPE.bits.columnElement <= PEs[6].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.fromPreviousPE.bits.diagonal <= PEs[6].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.fromPreviousPE.bits.upper <= PEs[6].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_6.io.fromPreviousPE.valid <= PEs[6].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[6].fromPreviousPE.ready <= processingElementDecoupled_6.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[7].toNextPE.bits.columnElement <= processingElementDecoupled_7.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[7].toNextPE.bits.diagonal <= processingElementDecoupled_7.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[7].toNextPE.bits.upper <= processingElementDecoupled_7.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[7].toNextPE.valid <= processingElementDecoupled_7.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.toNextPE.ready <= PEs[7].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[7].out.bits.y <= processingElementDecoupled_7.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[7].out.bits.x <= processingElementDecoupled_7.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[7].out.bits.score <= processingElementDecoupled_7.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[7].out.valid <= processingElementDecoupled_7.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.out.ready <= PEs[7].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.number <= PEs[7].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.reset <= PEs[7].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.rowElement <= PEs[7].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.fromPreviousPE.bits.columnElement <= PEs[7].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.fromPreviousPE.bits.diagonal <= PEs[7].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.fromPreviousPE.bits.upper <= PEs[7].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_7.io.fromPreviousPE.valid <= PEs[7].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[7].fromPreviousPE.ready <= processingElementDecoupled_7.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[8].toNextPE.bits.columnElement <= processingElementDecoupled_8.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[8].toNextPE.bits.diagonal <= processingElementDecoupled_8.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[8].toNextPE.bits.upper <= processingElementDecoupled_8.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[8].toNextPE.valid <= processingElementDecoupled_8.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.toNextPE.ready <= PEs[8].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[8].out.bits.y <= processingElementDecoupled_8.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[8].out.bits.x <= processingElementDecoupled_8.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[8].out.bits.score <= processingElementDecoupled_8.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[8].out.valid <= processingElementDecoupled_8.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.out.ready <= PEs[8].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.number <= PEs[8].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.reset <= PEs[8].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.rowElement <= PEs[8].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.fromPreviousPE.bits.columnElement <= PEs[8].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.fromPreviousPE.bits.diagonal <= PEs[8].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.fromPreviousPE.bits.upper <= PEs[8].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_8.io.fromPreviousPE.valid <= PEs[8].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[8].fromPreviousPE.ready <= processingElementDecoupled_8.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[9].toNextPE.bits.columnElement <= processingElementDecoupled_9.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[9].toNextPE.bits.diagonal <= processingElementDecoupled_9.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[9].toNextPE.bits.upper <= processingElementDecoupled_9.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[9].toNextPE.valid <= processingElementDecoupled_9.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.toNextPE.ready <= PEs[9].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[9].out.bits.y <= processingElementDecoupled_9.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[9].out.bits.x <= processingElementDecoupled_9.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[9].out.bits.score <= processingElementDecoupled_9.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[9].out.valid <= processingElementDecoupled_9.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.out.ready <= PEs[9].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.number <= PEs[9].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.reset <= PEs[9].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.rowElement <= PEs[9].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.fromPreviousPE.bits.columnElement <= PEs[9].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.fromPreviousPE.bits.diagonal <= PEs[9].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.fromPreviousPE.bits.upper <= PEs[9].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_9.io.fromPreviousPE.valid <= PEs[9].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[9].fromPreviousPE.ready <= processingElementDecoupled_9.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[10].toNextPE.bits.columnElement <= processingElementDecoupled_10.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[10].toNextPE.bits.diagonal <= processingElementDecoupled_10.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[10].toNextPE.bits.upper <= processingElementDecoupled_10.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[10].toNextPE.valid <= processingElementDecoupled_10.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.toNextPE.ready <= PEs[10].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[10].out.bits.y <= processingElementDecoupled_10.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[10].out.bits.x <= processingElementDecoupled_10.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[10].out.bits.score <= processingElementDecoupled_10.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[10].out.valid <= processingElementDecoupled_10.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.out.ready <= PEs[10].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.number <= PEs[10].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.reset <= PEs[10].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.rowElement <= PEs[10].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.fromPreviousPE.bits.columnElement <= PEs[10].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.fromPreviousPE.bits.diagonal <= PEs[10].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.fromPreviousPE.bits.upper <= PEs[10].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_10.io.fromPreviousPE.valid <= PEs[10].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[10].fromPreviousPE.ready <= processingElementDecoupled_10.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[11].toNextPE.bits.columnElement <= processingElementDecoupled_11.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[11].toNextPE.bits.diagonal <= processingElementDecoupled_11.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[11].toNextPE.bits.upper <= processingElementDecoupled_11.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[11].toNextPE.valid <= processingElementDecoupled_11.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.toNextPE.ready <= PEs[11].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[11].out.bits.y <= processingElementDecoupled_11.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[11].out.bits.x <= processingElementDecoupled_11.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[11].out.bits.score <= processingElementDecoupled_11.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[11].out.valid <= processingElementDecoupled_11.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.out.ready <= PEs[11].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.number <= PEs[11].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.reset <= PEs[11].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.rowElement <= PEs[11].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.fromPreviousPE.bits.columnElement <= PEs[11].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.fromPreviousPE.bits.diagonal <= PEs[11].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.fromPreviousPE.bits.upper <= PEs[11].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_11.io.fromPreviousPE.valid <= PEs[11].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[11].fromPreviousPE.ready <= processingElementDecoupled_11.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[12].toNextPE.bits.columnElement <= processingElementDecoupled_12.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[12].toNextPE.bits.diagonal <= processingElementDecoupled_12.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[12].toNextPE.bits.upper <= processingElementDecoupled_12.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[12].toNextPE.valid <= processingElementDecoupled_12.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.toNextPE.ready <= PEs[12].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[12].out.bits.y <= processingElementDecoupled_12.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[12].out.bits.x <= processingElementDecoupled_12.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[12].out.bits.score <= processingElementDecoupled_12.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[12].out.valid <= processingElementDecoupled_12.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.out.ready <= PEs[12].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.number <= PEs[12].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.reset <= PEs[12].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.rowElement <= PEs[12].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.fromPreviousPE.bits.columnElement <= PEs[12].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.fromPreviousPE.bits.diagonal <= PEs[12].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.fromPreviousPE.bits.upper <= PEs[12].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_12.io.fromPreviousPE.valid <= PEs[12].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[12].fromPreviousPE.ready <= processingElementDecoupled_12.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[13].toNextPE.bits.columnElement <= processingElementDecoupled_13.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[13].toNextPE.bits.diagonal <= processingElementDecoupled_13.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[13].toNextPE.bits.upper <= processingElementDecoupled_13.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[13].toNextPE.valid <= processingElementDecoupled_13.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.toNextPE.ready <= PEs[13].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[13].out.bits.y <= processingElementDecoupled_13.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[13].out.bits.x <= processingElementDecoupled_13.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[13].out.bits.score <= processingElementDecoupled_13.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[13].out.valid <= processingElementDecoupled_13.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.out.ready <= PEs[13].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.number <= PEs[13].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.reset <= PEs[13].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.rowElement <= PEs[13].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.fromPreviousPE.bits.columnElement <= PEs[13].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.fromPreviousPE.bits.diagonal <= PEs[13].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.fromPreviousPE.bits.upper <= PEs[13].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_13.io.fromPreviousPE.valid <= PEs[13].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[13].fromPreviousPE.ready <= processingElementDecoupled_13.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[14].toNextPE.bits.columnElement <= processingElementDecoupled_14.io.toNextPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    PEs[14].toNextPE.bits.diagonal <= processingElementDecoupled_14.io.toNextPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    PEs[14].toNextPE.bits.upper <= processingElementDecoupled_14.io.toNextPE.bits.upper @[WatermanSystolic.scala 25:20]
    PEs[14].toNextPE.valid <= processingElementDecoupled_14.io.toNextPE.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.toNextPE.ready <= PEs[14].toNextPE.ready @[WatermanSystolic.scala 25:20]
    PEs[14].out.bits.y <= processingElementDecoupled_14.io.out.bits.y @[WatermanSystolic.scala 25:20]
    PEs[14].out.bits.x <= processingElementDecoupled_14.io.out.bits.x @[WatermanSystolic.scala 25:20]
    PEs[14].out.bits.score <= processingElementDecoupled_14.io.out.bits.score @[WatermanSystolic.scala 25:20]
    PEs[14].out.valid <= processingElementDecoupled_14.io.out.valid @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.out.ready <= PEs[14].out.ready @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.number <= PEs[14].number @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.reset <= PEs[14].reset @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.rowElement <= PEs[14].rowElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.fromPreviousPE.bits.columnElement <= PEs[14].fromPreviousPE.bits.columnElement @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.fromPreviousPE.bits.diagonal <= PEs[14].fromPreviousPE.bits.diagonal @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.fromPreviousPE.bits.upper <= PEs[14].fromPreviousPE.bits.upper @[WatermanSystolic.scala 25:20]
    processingElementDecoupled_14.io.fromPreviousPE.valid <= PEs[14].fromPreviousPE.valid @[WatermanSystolic.scala 25:20]
    PEs[14].fromPreviousPE.ready <= processingElementDecoupled_14.io.fromPreviousPE.ready @[WatermanSystolic.scala 25:20]
    PEs[14].toNextPE.ready <= UInt<1>("h01") @[WatermanSystolic.scala 29:38]
    node _T = eq(stateReg, UInt<2>("h01")) @[WatermanSystolic.scala 32:47]
    PEs[0].fromPreviousPE.valid <= _T @[WatermanSystolic.scala 32:35]
    PEs[0].fromPreviousPE.bits.columnElement <= SReg[0] @[WatermanSystolic.scala 33:48]
    PEs[0].fromPreviousPE.bits.upper <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 34:40]
    PEs[0].fromPreviousPE.bits.diagonal <= asSInt(UInt<1>("h00")) @[WatermanSystolic.scala 35:43]
    PEs[0].number <= UInt<1>("h00") @[WatermanSystolic.scala 44:19]
    PEs[0].rowElement <= TReg[0] @[WatermanSystolic.scala 45:23]
    PEs[0].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[0].bits.x <= PEs[0].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[0].bits.y <= PEs[0].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[0].bits.score <= PEs[0].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[0].valid <= PEs[0].out.valid @[WatermanSystolic.scala 51:21]
    PEs[0].out.ready <= io.out[0].ready @[WatermanSystolic.scala 52:22]
    PEs[0].toNextPE.ready <= PEs[1].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[1].fromPreviousPE.valid <= PEs[0].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[1].fromPreviousPE.bits.upper <= PEs[0].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[1].fromPreviousPE.bits.diagonal <= PEs[0].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[1].fromPreviousPE.bits.columnElement <= PEs[0].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[1].number <= UInt<1>("h01") @[WatermanSystolic.scala 44:19]
    PEs[1].rowElement <= TReg[1] @[WatermanSystolic.scala 45:23]
    PEs[1].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[1].bits.x <= PEs[1].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[1].bits.y <= PEs[1].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[1].bits.score <= PEs[1].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[1].valid <= PEs[1].out.valid @[WatermanSystolic.scala 51:21]
    PEs[1].out.ready <= io.out[1].ready @[WatermanSystolic.scala 52:22]
    PEs[1].toNextPE.ready <= PEs[2].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[2].fromPreviousPE.valid <= PEs[1].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[2].fromPreviousPE.bits.upper <= PEs[1].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[2].fromPreviousPE.bits.diagonal <= PEs[1].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[2].fromPreviousPE.bits.columnElement <= PEs[1].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[2].number <= UInt<2>("h02") @[WatermanSystolic.scala 44:19]
    PEs[2].rowElement <= TReg[2] @[WatermanSystolic.scala 45:23]
    PEs[2].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[2].bits.x <= PEs[2].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[2].bits.y <= PEs[2].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[2].bits.score <= PEs[2].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[2].valid <= PEs[2].out.valid @[WatermanSystolic.scala 51:21]
    PEs[2].out.ready <= io.out[2].ready @[WatermanSystolic.scala 52:22]
    PEs[2].toNextPE.ready <= PEs[3].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[3].fromPreviousPE.valid <= PEs[2].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[3].fromPreviousPE.bits.upper <= PEs[2].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[3].fromPreviousPE.bits.diagonal <= PEs[2].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[3].fromPreviousPE.bits.columnElement <= PEs[2].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[3].number <= UInt<2>("h03") @[WatermanSystolic.scala 44:19]
    PEs[3].rowElement <= TReg[3] @[WatermanSystolic.scala 45:23]
    PEs[3].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[3].bits.x <= PEs[3].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[3].bits.y <= PEs[3].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[3].bits.score <= PEs[3].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[3].valid <= PEs[3].out.valid @[WatermanSystolic.scala 51:21]
    PEs[3].out.ready <= io.out[3].ready @[WatermanSystolic.scala 52:22]
    PEs[3].toNextPE.ready <= PEs[4].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[4].fromPreviousPE.valid <= PEs[3].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[4].fromPreviousPE.bits.upper <= PEs[3].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[4].fromPreviousPE.bits.diagonal <= PEs[3].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[4].fromPreviousPE.bits.columnElement <= PEs[3].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[4].number <= UInt<3>("h04") @[WatermanSystolic.scala 44:19]
    PEs[4].rowElement <= TReg[4] @[WatermanSystolic.scala 45:23]
    PEs[4].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[4].bits.x <= PEs[4].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[4].bits.y <= PEs[4].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[4].bits.score <= PEs[4].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[4].valid <= PEs[4].out.valid @[WatermanSystolic.scala 51:21]
    PEs[4].out.ready <= io.out[4].ready @[WatermanSystolic.scala 52:22]
    PEs[4].toNextPE.ready <= PEs[5].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[5].fromPreviousPE.valid <= PEs[4].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[5].fromPreviousPE.bits.upper <= PEs[4].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[5].fromPreviousPE.bits.diagonal <= PEs[4].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[5].fromPreviousPE.bits.columnElement <= PEs[4].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[5].number <= UInt<3>("h05") @[WatermanSystolic.scala 44:19]
    PEs[5].rowElement <= TReg[5] @[WatermanSystolic.scala 45:23]
    PEs[5].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[5].bits.x <= PEs[5].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[5].bits.y <= PEs[5].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[5].bits.score <= PEs[5].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[5].valid <= PEs[5].out.valid @[WatermanSystolic.scala 51:21]
    PEs[5].out.ready <= io.out[5].ready @[WatermanSystolic.scala 52:22]
    PEs[5].toNextPE.ready <= PEs[6].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[6].fromPreviousPE.valid <= PEs[5].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[6].fromPreviousPE.bits.upper <= PEs[5].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[6].fromPreviousPE.bits.diagonal <= PEs[5].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[6].fromPreviousPE.bits.columnElement <= PEs[5].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[6].number <= UInt<3>("h06") @[WatermanSystolic.scala 44:19]
    PEs[6].rowElement <= TReg[6] @[WatermanSystolic.scala 45:23]
    PEs[6].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[6].bits.x <= PEs[6].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[6].bits.y <= PEs[6].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[6].bits.score <= PEs[6].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[6].valid <= PEs[6].out.valid @[WatermanSystolic.scala 51:21]
    PEs[6].out.ready <= io.out[6].ready @[WatermanSystolic.scala 52:22]
    PEs[6].toNextPE.ready <= PEs[7].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[7].fromPreviousPE.valid <= PEs[6].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[7].fromPreviousPE.bits.upper <= PEs[6].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[7].fromPreviousPE.bits.diagonal <= PEs[6].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[7].fromPreviousPE.bits.columnElement <= PEs[6].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[7].number <= UInt<3>("h07") @[WatermanSystolic.scala 44:19]
    PEs[7].rowElement <= TReg[7] @[WatermanSystolic.scala 45:23]
    PEs[7].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[7].bits.x <= PEs[7].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[7].bits.y <= PEs[7].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[7].bits.score <= PEs[7].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[7].valid <= PEs[7].out.valid @[WatermanSystolic.scala 51:21]
    PEs[7].out.ready <= io.out[7].ready @[WatermanSystolic.scala 52:22]
    PEs[7].toNextPE.ready <= PEs[8].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[8].fromPreviousPE.valid <= PEs[7].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[8].fromPreviousPE.bits.upper <= PEs[7].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[8].fromPreviousPE.bits.diagonal <= PEs[7].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[8].fromPreviousPE.bits.columnElement <= PEs[7].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[8].number <= UInt<4>("h08") @[WatermanSystolic.scala 44:19]
    PEs[8].rowElement <= TReg[8] @[WatermanSystolic.scala 45:23]
    PEs[8].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[8].bits.x <= PEs[8].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[8].bits.y <= PEs[8].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[8].bits.score <= PEs[8].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[8].valid <= PEs[8].out.valid @[WatermanSystolic.scala 51:21]
    PEs[8].out.ready <= io.out[8].ready @[WatermanSystolic.scala 52:22]
    PEs[8].toNextPE.ready <= PEs[9].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[9].fromPreviousPE.valid <= PEs[8].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[9].fromPreviousPE.bits.upper <= PEs[8].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[9].fromPreviousPE.bits.diagonal <= PEs[8].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[9].fromPreviousPE.bits.columnElement <= PEs[8].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[9].number <= UInt<4>("h09") @[WatermanSystolic.scala 44:19]
    PEs[9].rowElement <= TReg[9] @[WatermanSystolic.scala 45:23]
    PEs[9].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[9].bits.x <= PEs[9].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[9].bits.y <= PEs[9].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[9].bits.score <= PEs[9].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[9].valid <= PEs[9].out.valid @[WatermanSystolic.scala 51:21]
    PEs[9].out.ready <= io.out[9].ready @[WatermanSystolic.scala 52:22]
    PEs[9].toNextPE.ready <= PEs[10].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[10].fromPreviousPE.valid <= PEs[9].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[10].fromPreviousPE.bits.upper <= PEs[9].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[10].fromPreviousPE.bits.diagonal <= PEs[9].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[10].fromPreviousPE.bits.columnElement <= PEs[9].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[10].number <= UInt<4>("h0a") @[WatermanSystolic.scala 44:19]
    PEs[10].rowElement <= TReg[10] @[WatermanSystolic.scala 45:23]
    PEs[10].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[10].bits.x <= PEs[10].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[10].bits.y <= PEs[10].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[10].bits.score <= PEs[10].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[10].valid <= PEs[10].out.valid @[WatermanSystolic.scala 51:21]
    PEs[10].out.ready <= io.out[10].ready @[WatermanSystolic.scala 52:22]
    PEs[10].toNextPE.ready <= PEs[11].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[11].fromPreviousPE.valid <= PEs[10].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[11].fromPreviousPE.bits.upper <= PEs[10].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[11].fromPreviousPE.bits.diagonal <= PEs[10].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[11].fromPreviousPE.bits.columnElement <= PEs[10].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[11].number <= UInt<4>("h0b") @[WatermanSystolic.scala 44:19]
    PEs[11].rowElement <= TReg[11] @[WatermanSystolic.scala 45:23]
    PEs[11].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[11].bits.x <= PEs[11].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[11].bits.y <= PEs[11].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[11].bits.score <= PEs[11].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[11].valid <= PEs[11].out.valid @[WatermanSystolic.scala 51:21]
    PEs[11].out.ready <= io.out[11].ready @[WatermanSystolic.scala 52:22]
    PEs[11].toNextPE.ready <= PEs[12].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[12].fromPreviousPE.valid <= PEs[11].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[12].fromPreviousPE.bits.upper <= PEs[11].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[12].fromPreviousPE.bits.diagonal <= PEs[11].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[12].fromPreviousPE.bits.columnElement <= PEs[11].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[12].number <= UInt<4>("h0c") @[WatermanSystolic.scala 44:19]
    PEs[12].rowElement <= TReg[12] @[WatermanSystolic.scala 45:23]
    PEs[12].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[12].bits.x <= PEs[12].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[12].bits.y <= PEs[12].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[12].bits.score <= PEs[12].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[12].valid <= PEs[12].out.valid @[WatermanSystolic.scala 51:21]
    PEs[12].out.ready <= io.out[12].ready @[WatermanSystolic.scala 52:22]
    PEs[12].toNextPE.ready <= PEs[13].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[13].fromPreviousPE.valid <= PEs[12].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[13].fromPreviousPE.bits.upper <= PEs[12].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[13].fromPreviousPE.bits.diagonal <= PEs[12].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[13].fromPreviousPE.bits.columnElement <= PEs[12].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[13].number <= UInt<4>("h0d") @[WatermanSystolic.scala 44:19]
    PEs[13].rowElement <= TReg[13] @[WatermanSystolic.scala 45:23]
    PEs[13].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[13].bits.x <= PEs[13].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[13].bits.y <= PEs[13].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[13].bits.score <= PEs[13].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[13].valid <= PEs[13].out.valid @[WatermanSystolic.scala 51:21]
    PEs[13].out.ready <= io.out[13].ready @[WatermanSystolic.scala 52:22]
    PEs[13].toNextPE.ready <= PEs[14].fromPreviousPE.ready @[WatermanSystolic.scala 37:33]
    PEs[14].fromPreviousPE.valid <= PEs[13].toNextPE.valid @[WatermanSystolic.scala 38:35]
    PEs[14].fromPreviousPE.bits.upper <= PEs[13].toNextPE.bits.upper @[WatermanSystolic.scala 39:40]
    PEs[14].fromPreviousPE.bits.diagonal <= PEs[13].toNextPE.bits.diagonal @[WatermanSystolic.scala 40:43]
    PEs[14].fromPreviousPE.bits.columnElement <= PEs[13].toNextPE.bits.columnElement @[WatermanSystolic.scala 41:48]
    PEs[14].number <= UInt<4>("h0e") @[WatermanSystolic.scala 44:19]
    PEs[14].rowElement <= TReg[14] @[WatermanSystolic.scala 45:23]
    PEs[14].reset <= resetReg @[WatermanSystolic.scala 46:18]
    io.out[14].bits.x <= PEs[14].out.bits.x @[WatermanSystolic.scala 48:22]
    io.out[14].bits.y <= PEs[14].out.bits.y @[WatermanSystolic.scala 49:22]
    io.out[14].bits.score <= PEs[14].out.bits.score @[WatermanSystolic.scala 50:26]
    io.out[14].valid <= PEs[14].out.valid @[WatermanSystolic.scala 51:21]
    PEs[14].out.ready <= io.out[14].ready @[WatermanSystolic.scala 52:22]
    node _T_1 = eq(stateReg, UInt<2>("h00")) @[WatermanSystolic.scala 55:27]
    io.in.ready <= _T_1 @[WatermanSystolic.scala 55:15]
    node _T_2 = eq(UInt<2>("h00"), stateReg) @[Conditional.scala 37:30]
    when _T_2 : @[Conditional.scala 40:58]
      when io.in.valid : @[WatermanSystolic.scala 59:25]
        SReg[0] <= io.in.bits.S[0] @[WatermanSystolic.scala 61:19]
        SReg[1] <= io.in.bits.S[1] @[WatermanSystolic.scala 61:19]
        SReg[2] <= io.in.bits.S[2] @[WatermanSystolic.scala 61:19]
        SReg[3] <= io.in.bits.S[3] @[WatermanSystolic.scala 61:19]
        SReg[4] <= io.in.bits.S[4] @[WatermanSystolic.scala 61:19]
        SReg[5] <= io.in.bits.S[5] @[WatermanSystolic.scala 61:19]
        SReg[6] <= io.in.bits.S[6] @[WatermanSystolic.scala 61:19]
        SReg[7] <= io.in.bits.S[7] @[WatermanSystolic.scala 61:19]
        SReg[8] <= io.in.bits.S[8] @[WatermanSystolic.scala 61:19]
        SReg[9] <= io.in.bits.S[9] @[WatermanSystolic.scala 61:19]
        SReg[10] <= io.in.bits.S[10] @[WatermanSystolic.scala 61:19]
        SReg[11] <= io.in.bits.S[11] @[WatermanSystolic.scala 61:19]
        SReg[12] <= io.in.bits.S[12] @[WatermanSystolic.scala 61:19]
        SReg[13] <= io.in.bits.S[13] @[WatermanSystolic.scala 61:19]
        SReg[14] <= io.in.bits.S[14] @[WatermanSystolic.scala 61:19]
        SReg[15] <= io.in.bits.S[15] @[WatermanSystolic.scala 61:19]
        SReg[16] <= io.in.bits.S[16] @[WatermanSystolic.scala 61:19]
        SReg[17] <= io.in.bits.S[17] @[WatermanSystolic.scala 61:19]
        SReg[18] <= io.in.bits.S[18] @[WatermanSystolic.scala 61:19]
        SReg[19] <= io.in.bits.S[19] @[WatermanSystolic.scala 61:19]
        SReg[20] <= io.in.bits.S[20] @[WatermanSystolic.scala 61:19]
        TReg[0] <= io.in.bits.T[0] @[WatermanSystolic.scala 64:19]
        TReg[1] <= io.in.bits.T[1] @[WatermanSystolic.scala 64:19]
        TReg[2] <= io.in.bits.T[2] @[WatermanSystolic.scala 64:19]
        TReg[3] <= io.in.bits.T[3] @[WatermanSystolic.scala 64:19]
        TReg[4] <= io.in.bits.T[4] @[WatermanSystolic.scala 64:19]
        TReg[5] <= io.in.bits.T[5] @[WatermanSystolic.scala 64:19]
        TReg[6] <= io.in.bits.T[6] @[WatermanSystolic.scala 64:19]
        TReg[7] <= io.in.bits.T[7] @[WatermanSystolic.scala 64:19]
        TReg[8] <= io.in.bits.T[8] @[WatermanSystolic.scala 64:19]
        TReg[9] <= io.in.bits.T[9] @[WatermanSystolic.scala 64:19]
        TReg[10] <= io.in.bits.T[10] @[WatermanSystolic.scala 64:19]
        TReg[11] <= io.in.bits.T[11] @[WatermanSystolic.scala 64:19]
        TReg[12] <= io.in.bits.T[12] @[WatermanSystolic.scala 64:19]
        TReg[13] <= io.in.bits.T[13] @[WatermanSystolic.scala 64:19]
        TReg[14] <= io.in.bits.T[14] @[WatermanSystolic.scala 64:19]
        resetReg <= UInt<1>("h00") @[WatermanSystolic.scala 66:18]
        stepReg <= UInt<1>("h00") @[WatermanSystolic.scala 67:17]
        stateReg <= UInt<2>("h01") @[WatermanSystolic.scala 68:18]
        skip @[WatermanSystolic.scala 59:25]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_3 = eq(UInt<2>("h01"), stateReg) @[Conditional.scala 37:30]
      when _T_3 : @[Conditional.scala 39:67]
        when PEs[0].fromPreviousPE.ready : @[WatermanSystolic.scala 72:41]
          SReg[0] <= SReg[1] @[WatermanSystolic.scala 74:19]
          SReg[1] <= SReg[2] @[WatermanSystolic.scala 74:19]
          SReg[2] <= SReg[3] @[WatermanSystolic.scala 74:19]
          SReg[3] <= SReg[4] @[WatermanSystolic.scala 74:19]
          SReg[4] <= SReg[5] @[WatermanSystolic.scala 74:19]
          SReg[5] <= SReg[6] @[WatermanSystolic.scala 74:19]
          SReg[6] <= SReg[7] @[WatermanSystolic.scala 74:19]
          SReg[7] <= SReg[8] @[WatermanSystolic.scala 74:19]
          SReg[8] <= SReg[9] @[WatermanSystolic.scala 74:19]
          SReg[9] <= SReg[10] @[WatermanSystolic.scala 74:19]
          SReg[10] <= SReg[11] @[WatermanSystolic.scala 74:19]
          SReg[11] <= SReg[12] @[WatermanSystolic.scala 74:19]
          SReg[12] <= SReg[13] @[WatermanSystolic.scala 74:19]
          SReg[13] <= SReg[14] @[WatermanSystolic.scala 74:19]
          SReg[14] <= SReg[15] @[WatermanSystolic.scala 74:19]
          SReg[15] <= SReg[16] @[WatermanSystolic.scala 74:19]
          SReg[16] <= SReg[17] @[WatermanSystolic.scala 74:19]
          SReg[17] <= SReg[18] @[WatermanSystolic.scala 74:19]
          SReg[18] <= SReg[19] @[WatermanSystolic.scala 74:19]
          SReg[19] <= SReg[20] @[WatermanSystolic.scala 74:19]
          node _T_4 = add(stepReg, UInt<1>("h01")) @[WatermanSystolic.scala 76:28]
          node _T_5 = tail(_T_4, 1) @[WatermanSystolic.scala 76:28]
          stepReg <= _T_5 @[WatermanSystolic.scala 76:17]
          node _T_6 = eq(stepReg, UInt<5>("h014")) @[WatermanSystolic.scala 77:22]
          when _T_6 : @[WatermanSystolic.scala 77:49]
            stateReg <= UInt<2>("h02") @[WatermanSystolic.scala 78:20]
            skip @[WatermanSystolic.scala 77:49]
          skip @[WatermanSystolic.scala 72:41]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_7 = eq(UInt<2>("h02"), stateReg) @[Conditional.scala 37:30]
        when _T_7 : @[Conditional.scala 39:67]
          node _T_8 = eq(PEs[14].out.bits.x, UInt<4>("h0e")) @[WatermanSystolic.scala 83:79]
          node _T_9 = and(PEs[14].out.valid, _T_8) @[WatermanSystolic.scala 83:44]
          when _T_9 : @[WatermanSystolic.scala 83:104]
            resetReg <= UInt<1>("h01") @[WatermanSystolic.scala 84:18]
            stateReg <= UInt<2>("h00") @[WatermanSystolic.scala 85:18]
            skip @[WatermanSystolic.scala 83:104]
          skip @[Conditional.scala 39:67]
    
